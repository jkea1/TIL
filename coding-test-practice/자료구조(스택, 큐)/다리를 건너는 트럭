//방법1
function solution(bridge_length, weight, truck_weights) {
    let totalTime = 0;
    //다리, 다리 위의 빈칸을 0으로 표현했다. 
    const bridge = Array(bridge_length).fill(0);
    //현재 다리의 총 무게
    let currentBridgeWeight = 0;
    
    //while(건너지 못한 트럭이 없을때 까지)
    while(truck_weights.length) {
        //timeCount++
        totalTime = totalTime + 1;
        //다리의 제일 앞에 있는 트럭은 빠져나온다. 
        bridge.shift();
        //현재 다리의 총 무게 갱신
        currentBridgeWeight = bridge.reduce((prev, cur) => {
              return prev + cur;
            }, 0);

        //if(갱신된 다리의 무게 + 건너야 할 첫번째 트럭무게 <= weight)
        if(currentBridgeWeight + truck_weights[0] <= weight) {
            //다음 트럭이 다리위로 이동하게 한다. 
            bridge.push(truck_weights.shift());
        } else {
            //아니라면 다리 위에 있는 트럭들만 한칸 이동한다.
            bridge.push(0);
        }
    };
    console.log(totalTime);
    return totalTime + bridge_length;
}

//방법2 - 객체 지향적 방법

