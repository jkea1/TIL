{"ast":null,"code":"import { take, put, call, delay, takeLatest, all, fork } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\n//AddPost\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        //id: id 와 같은 표현이다. \n        content: action.data //addPost로 받은 게시글 data를 리듀서의 'ADD_POST_SUCCESS'로 넘겨준다. \n      }\n    });\n\n    yield put({\n      type: ADD_POST_TO_ME\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//AddComment\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//rootSaga 만들어 두고 원하는 비동기 action을 하나씩 넣어준다.\n//ADD_xxx_xxx이라는 action이 실행될때 까지 take = 기다리겠다 는 의미이다. \n//action이 실행되면 addPost 함수를 실행한다.\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["take","put","call","delay","takeLatest","all","fork","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","addPostAPI","data","post","addPost","action","id","shortId","generate","type","content","err","response","addCommentAPI","postId","addComment","watchAddPost","watchAddComment","postSaga"],"sources":["/Users/jinkyungjung/Desktop/CODING/react-nodebird/prepare/front/sagas/post.js"],"sourcesContent":["import {take, put, call, delay, takeLatest, all, fork} from 'redux-saga/effects'\nimport axios from 'axios';\nimport {\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE\n  } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\n//AddPost\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id, //id: id 와 같은 표현이다. \n        content : action.data, //addPost로 받은 게시글 data를 리듀서의 'ADD_POST_SUCCESS'로 넘겨준다. \n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n    })\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    })\n  }\n}\n\n//AddComment\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    })\n  }\n}\n\n\n//rootSaga 만들어 두고 원하는 비동기 action을 하나씩 넣어준다.\n//ADD_xxx_xxx이라는 action이 실행될때 까지 take = 기다리겠다 는 의미이다. \n//action이 실행되면 addPost 함수를 실행한다.\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchAddComment),\n  ])\n}"],"mappings":"AAAA,SAAQA,IAAI,EAAEC,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAEC,UAAU,EAAEC,GAAG,EAAEC,IAAI,QAAO,oBAAoB;AAChF,OAAOC,KAAK,MAAM,OAAO;AACzB,SACEC,gBAAgB,EAAEC,gBAAgB,EAAEC,gBAAgB,EACpDC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,QACtD,kBAAkB;AAC3B,SAASC,cAAc,QAAQ,kBAAkB;;AAEjD;AACA,SAASC,UAAU,CAACC,IAAI,EAAE;EACxB,OAAOT,KAAK,CAACU,IAAI,CAAC,WAAW,EAAED,IAAI,CAAC;AACtC;AAEA,UAAUE,OAAO,CAACC,MAAM,EAAE;EACxB,IAAI;IACF;IACA,MAAMhB,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMiB,EAAE,GAAGC,OAAO,CAACC,QAAQ,EAAE;IAC7B,MAAMrB,GAAG,CAAC;MACRsB,IAAI,EAAEd,gBAAgB;MACtBO,IAAI,EAAE;QACJI,EAAE;QAAE;QACJI,OAAO,EAAGL,MAAM,CAACH,IAAI,CAAE;MACzB;IACF,CAAC,CAAC;;IACF,MAAMf,GAAG,CAAC;MACRsB,IAAI,EAAET;IACR,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOW,GAAG,EAAE;IACZ,MAAMxB,GAAG,CAAC;MACRsB,IAAI,EAAEb,gBAAgB;MACtBM,IAAI,EAAES,GAAG,CAACC,QAAQ,CAACV;IACrB,CAAC,CAAC;EACJ;AACF;;AAEA;AACA,SAASW,aAAa,CAACX,IAAI,EAAE;EAC3B,OAAOT,KAAK,CAACU,IAAI,CAAE,aAAYD,IAAI,CAACY,MAAO,UAAS,EAAEZ,IAAI,CAAC;AAC7D;AAEA,UAAUa,UAAU,CAACV,MAAM,EAAE;EAC3B,IAAI;IACF;IACA,MAAMhB,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMF,GAAG,CAAC;MACRsB,IAAI,EAAEX,mBAAmB;MACzBI,IAAI,EAAEG,MAAM,CAACH;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOS,GAAG,EAAE;IACZ,MAAMxB,GAAG,CAAC;MACRsB,IAAI,EAAEV,mBAAmB;MACzBG,IAAI,EAAES,GAAG,CAACC,QAAQ,CAACV;IACrB,CAAC,CAAC;EACJ;AACF;;AAGA;AACA;AACA;;AAEA,UAAUc,YAAY,GAAG;EACvB,MAAM1B,UAAU,CAACI,gBAAgB,EAAEU,OAAO,CAAC;AAC7C;AAEA,UAAUa,eAAe,GAAG;EAC1B,MAAM3B,UAAU,CAACO,mBAAmB,EAAEkB,UAAU,CAAC;AACnD;AAGA,eAAe,UAAUG,QAAQ,GAAG;EAClC,MAAM3B,GAAG,CAAC,CACRC,IAAI,CAACwB,YAAY,CAAC,EAClBxB,IAAI,CAACyB,eAAe,CAAC,CACtB,CAAC;AACJ"},"metadata":{},"sourceType":"module"}