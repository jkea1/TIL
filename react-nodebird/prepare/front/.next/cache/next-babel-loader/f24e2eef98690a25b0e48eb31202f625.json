{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _templateObject,\n  _templateObject2,\n  _this = this,\n  _jsxFileName = \"/Users/jinkyungjung/Documents/programming/TIL/react-nodebird/prepare/front/components/LoginForm.js\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport Link from 'next/link';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useInput from '../hooks/useInput';\nimport { loginRequestAction } from '../reducers/user';\nimport { useEffect } from 'react';\n\n//ButtonWrapper라는 스타일이 적용된 component를 만들어 사용할 수 있다. \n//ButtonWrapper는 div 태그가 된다. \nvar ButtonWrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  marginTop: 10px;\\n\"])));\n_c = ButtonWrapper;\nvar FormWrapper = styled(Form)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n  padding: 10px;\\n\"])));\n//setIsLoggedIn은 더미데이터로 AppLayout에서 넘겨 받음\n_c2 = FormWrapper;\nvar LoginForm = function LoginForm() {\n  _s();\n  var dispatch = useDispatch();\n  var _useSelector = useSelector(function (state) {\n      return state.user;\n    }),\n    logInLoading = _useSelector.logInLoading,\n    logInError = _useSelector.logInError;\n  var _useInput = useInput(''),\n    _useInput2 = _slicedToArray(_useInput, 2),\n    email = _useInput2[0],\n    onChangeEmail = _useInput2[1];\n  var _useInput3 = useInput(''),\n    _useInput4 = _slicedToArray(_useInput3, 2),\n    password = _useInput4[0],\n    onChangePassword = _useInput4[1];\n  useEffect(function () {}, [logInError]);\n\n  //로그인을 하는 순간 setIsLoggedIn(true)로 인해 \n  //isLoggedIn 이 true로 바뀌고 -> <UserProfile /> 로 바뀐다. \n  //서버가 없어도 useState 이용해서 더미데이터로 로그인을 시켜줄 수 있다. \n  var onSubmitForm = useCallback(function () {\n    console.log(email, password);\n    dispatch(loginRequestAction({\n      email: email,\n      password: password\n    }));\n  }, [email, password]);\n  return __jsx(FormWrapper, {\n    onFinish: onSubmitForm,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, \" \", __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"user-email\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, \"\\uC774\\uBA54\\uC77C\"), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }), __jsx(Input, {\n    name: \"user-email\",\n    type: \"email\",\n    value: email,\n    onChange: onChangeEmail,\n    required: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"user-password\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"\\uBE44\\uBC00\\uBC88\\uD638\"), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }), __jsx(Input, {\n    name: \"user-id\",\n    value: password,\n    onChange: onChangePassword,\n    required: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  })), __jsx(ButtonWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: logInLoading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, \"\\uB85C\\uADF8\\uC778\"), __jsx(Link, {\n    href: \"/signup\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 30\n    }\n  }, __jsx(Button, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 33\n    }\n  }, \"\\uD68C\\uC6D0\\uAC00\\uC785\")))));\n};\n_s(LoginForm, \"tKkOVmPqh2u0qZseKATViWPnz+M=\", false, function () {\n  return [useDispatch, useSelector, useInput, useInput];\n});\n_c3 = LoginForm;\nexport default LoginForm;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ButtonWrapper\");\n$RefreshReg$(_c2, \"FormWrapper\");\n$RefreshReg$(_c3, \"LoginForm\");","map":{"version":3,"names":["React","useState","useCallback","useMemo","Form","Input","Button","Link","styled","useDispatch","useSelector","useInput","loginRequestAction","useEffect","ButtonWrapper","div","FormWrapper","LoginForm","dispatch","state","user","logInLoading","logInError","email","onChangeEmail","password","onChangePassword","onSubmitForm","console","log"],"sources":["/Users/jinkyungjung/Documents/programming/TIL/react-nodebird/prepare/front/components/LoginForm.js"],"sourcesContent":["import React, { useState, useCallback, useMemo } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport Link from 'next/link';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport useInput from '../hooks/useInput';\nimport { loginRequestAction } from '../reducers/user';\nimport { useEffect } from 'react';\n\n//ButtonWrapper라는 스타일이 적용된 component를 만들어 사용할 수 있다. \n//ButtonWrapper는 div 태그가 된다. \nconst ButtonWrapper = styled.div`\n  marginTop: 10px;\n`;\nconst FormWrapper = styled(Form)`\n  padding: 10px;\n`\n//setIsLoggedIn은 더미데이터로 AppLayout에서 넘겨 받음\nconst LoginForm = () => {\n  const dispatch = useDispatch()\n  const { logInLoading, logInError } = useSelector((state) => state.user);\n  const [email, onChangeEmail] = useInput('');\n  const [password, onChangePassword] = useInput('');\n\n  useEffect(() => {\n\n  }, [logInError]);\n  \n  //로그인을 하는 순간 setIsLoggedIn(true)로 인해 \n  //isLoggedIn 이 true로 바뀌고 -> <UserProfile /> 로 바뀐다. \n  //서버가 없어도 useState 이용해서 더미데이터로 로그인을 시켜줄 수 있다. \n  const onSubmitForm = useCallback(() => {\n    console.log(email, password);\n    dispatch(loginRequestAction({email, password}))\n  }, [email, password]);\n\n  return(\n    <FormWrapper onFinish={onSubmitForm}> {/* antd에서는 onSubmit 대신 onFinish를 쓴다.  */}\n      <div>\n        <label htmlFor = \"user-email\">이메일</label>\n        <br />\n        <Input \n          name=\"user-email\" \n          type=\"email\"\n          value={email}\n          onChange={onChangeEmail} \n          required \n        />\n      </div>\n      <div>\n        <label htmlFor=\"user-password\">비밀번호</label>\n        <br />\n        <Input \n          name=\"user-id\" \n          value={password} \n          onChange={onChangePassword} \n          required \n        />\n      </div>\n      <ButtonWrapper>\n        <Button type=\"primary\" htmlType=\"submit\" loading={logInLoading}>로그인</Button>\n        <Link href=\"/signup\"><a><Button>회원가입</Button></a></Link>\n      </ButtonWrapper>\n    </FormWrapper>\n  )\n}\n\nexport default LoginForm;"],"mappings":";;;;;;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,EAAEC,OAAO,QAAQ,OAAO;AAC7D,SAASC,IAAI,EAAEC,KAAK,EAAEC,MAAM,QAAQ,MAAM;AAC1C,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,SAASC,kBAAkB,QAAQ,kBAAkB;AACrD,SAASC,SAAS,QAAQ,OAAO;;AAEjC;AACA;AACA,IAAMC,aAAa,GAAGN,MAAM,CAACO,GAAG,2FAE/B;AAAC,KAFID,aAAa;AAGnB,IAAME,WAAW,GAAGR,MAAM,CAACJ,IAAI,CAAC,2FAE/B;AACD;AAAA,MAHMY,WAAW;AAIjB,IAAMC,SAAS,GAAG,SAAZA,SAAS,GAAS;EAAA;EACtB,IAAMC,QAAQ,GAAGT,WAAW,EAAE;EAC9B,mBAAqCC,WAAW,CAAC,UAACS,KAAK;MAAA,OAAKA,KAAK,CAACC,IAAI;IAAA,EAAC;IAA/DC,YAAY,gBAAZA,YAAY;IAAEC,UAAU,gBAAVA,UAAU;EAChC,gBAA+BX,QAAQ,CAAC,EAAE,CAAC;IAAA;IAApCY,KAAK;IAAEC,aAAa;EAC3B,iBAAqCb,QAAQ,CAAC,EAAE,CAAC;IAAA;IAA1Cc,QAAQ;IAAEC,gBAAgB;EAEjCb,SAAS,CAAC,YAAM,CAEhB,CAAC,EAAE,CAACS,UAAU,CAAC,CAAC;;EAEhB;EACA;EACA;EACA,IAAMK,YAAY,GAAGzB,WAAW,CAAC,YAAM;IACrC0B,OAAO,CAACC,GAAG,CAACN,KAAK,EAAEE,QAAQ,CAAC;IAC5BP,QAAQ,CAACN,kBAAkB,CAAC;MAACW,KAAK,EAALA,KAAK;MAAEE,QAAQ,EAARA;IAAQ,CAAC,CAAC,CAAC;EACjD,CAAC,EAAE,CAACF,KAAK,EAAEE,QAAQ,CAAC,CAAC;EAErB,OACE,MAAC,WAAW;IAAC,QAAQ,EAAEE,YAAa;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,QAClC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACE;IAAO,OAAO,EAAG,YAAY;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,wBAAY,EACzC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAM,EACN,MAAC,KAAK;IACJ,IAAI,EAAC,YAAY;IACjB,IAAI,EAAC,OAAO;IACZ,KAAK,EAAEJ,KAAM;IACb,QAAQ,EAAEC,aAAc;IACxB,QAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EACR,CACE,EACN;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACE;IAAO,OAAO,EAAC,eAAe;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,8BAAa,EAC3C;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAM,EACN,MAAC,KAAK;IACJ,IAAI,EAAC,SAAS;IACd,KAAK,EAAEC,QAAS;IAChB,QAAQ,EAAEC,gBAAiB;IAC3B,QAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EACR,CACE,EACN,MAAC,aAAa;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACZ,MAAC,MAAM;IAAC,IAAI,EAAC,SAAS;IAAC,QAAQ,EAAC,QAAQ;IAAC,OAAO,EAAEL,YAAa;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,wBAAa,EAC5E,MAAC,IAAI;IAAC,IAAI,EAAC,SAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAG,MAAC,MAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,8BAAc,CAAI,CAAO,CAC1C,CACJ;AAElB,CAAC;AAAA,GA/CKJ,SAAS;EAAA,QACIR,WAAW,EACSC,WAAW,EACjBC,QAAQ,EACFA,QAAQ;AAAA;AAAA,MAJzCM,SAAS;AAiDf,eAAeA,SAAS;AAAC;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}