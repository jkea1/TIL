{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport produce from 'immer';\nexport var initialState = {\n  followLoading: false,\n  followDone: false,\n  followError: null,\n  unfollowLoading: false,\n  unfollowDone: false,\n  unfollowError: null,\n  logInLoading: false,\n  //로그인 시도중, true면 로딩창을 띄운다. \n  logInDone: false,\n  logInError: null,\n  //false로 해도 된다. \n  logOutLoading: false,\n  //로그아웃 시도중, true면 로딩창을 띄운다.\n  logOutDone: false,\n  logOutError: null,\n  signUpLoading: false,\n  //회원가입하기 시도중\n  signUpDone: false,\n  signUpError: null,\n  changeNicknameLoading: false,\n  //닉네임 변경 시도중\n  changeNicknameDone: false,\n  changeNicknameError: null,\n  me: null,\n  //me는 로그인한 사용자 정보이다. \n  signUpDate: {},\n  loginDate: {}\n};\n\n//오타에 취약한 애들은 변수로 만들자. \nexport var LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport var LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport var LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport var LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport var LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport var LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport var SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport var SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport var SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport var CHANGE_NICKNAME_REQUEST = 'CHANGE_NICKNAME_REQUEST';\nexport var CHANGE_NICKNAME_SUCCESS = 'CHANGE_NICKNAME_SUCCESS';\nexport var CHANGE_NICKNAME_FAILURE = 'CHANGE_NICKNAME_FAILURE';\nexport var FOLLOW_REQUEST = 'FOLLOW_REQUEST';\nexport var FOLLOW_SUCCESS = 'FOLLOW_SUCCESS';\nexport var FOLLOW_FAILURE = 'FOLLOW_FAILURE';\nexport var UNFOLLOW_REQUEST = 'UNFOLLOW_REQUEST';\nexport var UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS';\nexport var UNFOLLOW_FAILURE = 'UNFOLLOW_FAILURE';\n\n//user reducer 상태를 바꿀 수 있는 action \n//reducer를 바꾸기 위해서는 action을 줘야 한다. \nexport var ADD_POST_TO_ME = 'ADD_POST_TO_ME';\nexport var REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\nvar dummyUser = function dummyUser(data) {\n  return _objectSpread(_objectSpread({}, data), {}, {\n    nickname: '정진경',\n    id: 1,\n    //시퀄라이즈에서 합쳐주기 때문에 대문자이다. \n    Posts: [{\n      id: 1\n    }],\n    Followings: [{\n      nickname: '부기초'\n    }, {\n      nickname: 'ea'\n    }, {\n      nickname: 'gang'\n    }],\n    Followers: [{\n      nickname: '부기초'\n    }, {\n      nickname: 'ea'\n    }, {\n      nickname: 'gang'\n    }]\n  });\n};\n\n//동적 action (=action creator)\n//SUCCESS와 FAILURE 는 saga가 put으로 호출해 준다. \nexport var loginRequestAction = function loginRequestAction(data) {\n  return {\n    type: 'LOG_IN_REQUEST',\n    data: data\n  };\n};\nexport var logoutRequestAction = function logoutRequestAction() {\n  return {\n    type: 'LOG_OUT_REQUEST'\n  };\n};\n\n//case 로그인 요청\n//data를 보여줄 것인가는 정책에 따라서 다르다. \n//1. 로딩창이 돌아가고 있을때 배경화면에 데이터를 유지해서 보여줄것인가 \n//2. 그 데이터마저 없애서 보여줄것인가 me : null 을 추가해준다.\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    //state라는 이름이 draft로 바뀐다. \n    switch (action.type) {\n      //로그인\n      case LOG_IN_REQUEST:\n        draft.logInLoading = true;\n        draft.logInError = null; //로딩할때는 error는 없애준다. \n        draft.logInDone = false;\n        break;\n      case LOG_IN_SUCCESS:\n        draft.logInLoading = false;\n        draft.logInDone = true;\n        draft.me = dummyUser(action.data);\n        break;\n      case LOG_IN_FAILURE:\n        draft.logInLoading = false;\n        draft.logInError = action.error;\n        break;\n\n      //로그아웃\n      case LOG_OUT_REQUEST:\n        draft.logOutLoading = true;\n        draft.logOutDone = false;\n        draft.logOutError = null;\n        break;\n      case LOG_OUT_SUCCESS:\n        draft.logOutLoading = false;\n        draft.logOutDone = true;\n        draft.me = null;\n        break;\n      case LOG_OUT_FAILURE:\n        draft.logOutLoading = false;\n        draft.logOutError = action.error;\n        break;\n\n      //사인업\n      case SIGN_UP_REQUEST:\n        draft.signUpLoading = true;\n        draft.signUpDone = false;\n        draft.signUpError = null;\n        break;\n      case SIGN_UP_SUCCESS:\n        draft.signUpLoading = false;\n        draft.signUpDone = true;\n        break;\n      case SIGN_UP_FAILURE:\n        draft.signUpLoading = false;\n        draft.signUpError = action.error;\n        break;\n\n      //닉네임 변경\n      case CHANGE_NICKNAME_REQUEST:\n        draft.changeNicknameLoading = true;\n        draft.changeNicknameDone = false;\n        draft.changeNicknameError = null;\n        break;\n      case CHANGE_NICKNAME_SUCCESS:\n        draft.changeNicknameLoading = false;\n        draft.changeNicknameDone = true;\n        break;\n      case CHANGE_NICKNAME_FAILURE:\n        draft.changeNicknameLoading = false;\n        draft.changeNicknameError = action.error;\n        break;\n\n      //프로필 정보 \n      case ADD_POST_TO_ME:\n        draft.me.Posts.unshift({\n          id: action.data\n        });\n        break;\n      /* return {\n          //불변성 지켜줘야 한다. \n          ...state,\n          me: {\n            ...state.me, \n            Posts: [{id: action.data}, ...state.me.Posts]\n          },\n        }; */\n\n      //remove action과 같은 같은 id를 가진 게시글이 있으면 지운다. \n      case REMOVE_POST_OF_ME:\n        draft.me.Posts = draft.me.Posts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n      /* return {\n        ...state,\n        me: {\n          ...state.me, \n          Posts: state.me.Posts.filter((v) => v.id !== action.data), \n        },\n      }; */\n\n      //follow\n      case FOLLOW_REQUEST:\n        draft.followLoading = true;\n        draft.followError = null; //로딩할때는 error는 없애준다. \n        draft.followDone = false;\n        break;\n      case FOLLOW_SUCCESS:\n        draft.followLoading = false;\n        draft.followDone = true;\n        draft.me = dummyUser(action.data);\n        break;\n      case FOLLOW_FAILURE:\n        draft.followLoading = false;\n        draft.followError = action.error;\n        break;\n\n      //unfollow\n      case UNFOLLOW_REQUEST:\n        draft.unfollowLoading = true;\n        draft.unfollowError = null; //로딩할때는 error는 없애준다. \n        draft.unfollowDone = false;\n        break;\n      case UNFOLLOW_SUCCESS:\n        draft.unfollowLoading = false;\n        draft.unfollowDone = true;\n        draft.me = dummyUser(action.data);\n        break;\n      case UNFOLLOW_FAILURE:\n        draft.unfollowLoading = false;\n        draft.unfollowError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["produce","initialState","followLoading","followDone","followError","unfollowLoading","unfollowDone","unfollowError","logInLoading","logInDone","logInError","logOutLoading","logOutDone","logOutError","signUpLoading","signUpDone","signUpError","changeNicknameLoading","changeNicknameDone","changeNicknameError","me","signUpDate","loginDate","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","CHANGE_NICKNAME_REQUEST","CHANGE_NICKNAME_SUCCESS","CHANGE_NICKNAME_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","dummyUser","data","nickname","id","Posts","Followings","Followers","loginRequestAction","type","logoutRequestAction","reducer","state","action","draft","error","unshift","filter","v"],"sources":["/Users/jinkyungjung/Desktop/CODING/react-nodebird/prepare/front/reducers/user.js"],"sourcesContent":["import produce from 'immer';\n\nexport const initialState = {\n  followLoading: false, \n  followDone: false,\n  followError: null, \n  unfollowLoading: false, \n  unfollowDone: false,\n  unfollowError: null,\n  logInLoading: false, //로그인 시도중, true면 로딩창을 띄운다. \n  logInDone: false,\n  logInError: null, //false로 해도 된다. \n  logOutLoading: false, //로그아웃 시도중, true면 로딩창을 띄운다.\n  logOutDone: false,\n  logOutError: null,\n  signUpLoading: false, //회원가입하기 시도중\n  signUpDone: false,\n  signUpError: null,\n  changeNicknameLoading: false, //닉네임 변경 시도중\n  changeNicknameDone: false, \n  changeNicknameError: null, \n  me: null, //me는 로그인한 사용자 정보이다. \n  signUpDate: {},\n  loginDate: {},\n}\n\n//오타에 취약한 애들은 변수로 만들자. \nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\n\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\n\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\n\nexport const CHANGE_NICKNAME_REQUEST = 'CHANGE_NICKNAME_REQUEST';\nexport const CHANGE_NICKNAME_SUCCESS = 'CHANGE_NICKNAME_SUCCESS';\nexport const CHANGE_NICKNAME_FAILURE = 'CHANGE_NICKNAME_FAILURE';\n\nexport const FOLLOW_REQUEST = 'FOLLOW_REQUEST';\nexport const FOLLOW_SUCCESS = 'FOLLOW_SUCCESS';\nexport const FOLLOW_FAILURE = 'FOLLOW_FAILURE';\n\nexport const UNFOLLOW_REQUEST = 'UNFOLLOW_REQUEST';\nexport const UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS';\nexport const UNFOLLOW_FAILURE = 'UNFOLLOW_FAILURE';\n\n//user reducer 상태를 바꿀 수 있는 action \n//reducer를 바꾸기 위해서는 action을 줘야 한다. \nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\n\nconst dummyUser = (data) => ({\n  ...data,\n  nickname : '정진경',\n  id: 1, \n  //시퀄라이즈에서 합쳐주기 때문에 대문자이다. \n  Posts: [{id: 1}],\n  Followings: [{nickname: '부기초'}, {nickname: 'ea'}, {nickname: 'gang'}],\n  Followers: [{nickname: '부기초'}, {nickname: 'ea'}, {nickname: 'gang'}],\n})\n\n//동적 action (=action creator)\n//SUCCESS와 FAILURE 는 saga가 put으로 호출해 준다. \nexport const loginRequestAction = (data) => {\n  return {\n    type : 'LOG_IN_REQUEST',\n    data,\n  }\n};\n\nexport const logoutRequestAction = () => {\n  return {\n    type : 'LOG_OUT_REQUEST',\n  }\n};\n\n//case 로그인 요청\n//data를 보여줄 것인가는 정책에 따라서 다르다. \n//1. 로딩창이 돌아가고 있을때 배경화면에 데이터를 유지해서 보여줄것인가 \n//2. 그 데이터마저 없애서 보여줄것인가 me : null 을 추가해준다.\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, (draft) => { //state라는 이름이 draft로 바뀐다. \n    switch (action.type) {\n      //로그인\n      case LOG_IN_REQUEST : \n        draft.logInLoading = true;\n        draft.logInError = null; //로딩할때는 error는 없애준다. \n        draft.logInDone = false;\n        break;\n      case LOG_IN_SUCCESS : \n        draft.logInLoading =  false;\n        draft.logInDone = true;\n        draft.me = dummyUser(action.data);\n        break;\n      case LOG_IN_FAILURE : \n        draft.logInLoading = false;\n        draft.logInError = action.error;\n        break;\n      \n      //로그아웃\n      case LOG_OUT_REQUEST : \n        draft.logOutLoading = true;\n        draft.logOutDone = false;\n        draft.logOutError = null;\n        break;\n      \n      case LOG_OUT_SUCCESS : \n        draft.logOutLoading = false;\n        draft.logOutDone = true;\n        draft.me = null;\n        break;\n\n      case LOG_OUT_FAILURE : \n        draft.logOutLoading = false;\n        draft.logOutError = action.error;\n        break;\n      \n        //사인업\n      case SIGN_UP_REQUEST : \n        draft.signUpLoading = true;\n        draft.signUpDone = false;\n        draft.signUpError = null;\n        break;\n      case SIGN_UP_SUCCESS : \n        draft.signUpLoading = false;\n        draft.signUpDone = true;\n        break;\n      case SIGN_UP_FAILURE : \n        draft.signUpLoading = false;\n        draft.signUpError = action.error;\n        break;\n\n        //닉네임 변경\n      case CHANGE_NICKNAME_REQUEST : \n        draft.changeNicknameLoading = true;\n        draft.changeNicknameDone = false;\n        draft.changeNicknameError = null;\n        break;\n      case CHANGE_NICKNAME_SUCCESS : \n        draft.changeNicknameLoading = false;\n        draft.changeNicknameDone = true;\n        break;\n      case CHANGE_NICKNAME_FAILURE : \n        draft.changeNicknameLoading = false;\n        draft.changeNicknameError = action.error;\n        break;\n      \n      //프로필 정보 \n      case ADD_POST_TO_ME:\n        draft.me.Posts.unshift({id: action.data});\n        break;\n        /* return {\n            //불변성 지켜줘야 한다. \n            ...state,\n            me: {\n              ...state.me, \n              Posts: [{id: action.data}, ...state.me.Posts]\n            },\n          }; */\n        \n        //remove action과 같은 같은 id를 가진 게시글이 있으면 지운다. \n        case REMOVE_POST_OF_ME:\n          draft.me.Posts = draft.me.Posts.filter((v) => v.id !== action.data);\n          break;\n          /* return {\n            ...state,\n            me: {\n              ...state.me, \n              Posts: state.me.Posts.filter((v) => v.id !== action.data), \n            },\n          }; */\n\n        //follow\n        case FOLLOW_REQUEST : \n          draft.followLoading = true;\n          draft.followError = null; //로딩할때는 error는 없애준다. \n          draft.followDone = false;\n          break;\n        case FOLLOW_SUCCESS : \n          draft.followLoading =  false;\n          draft.followDone = true;\n          draft.me = dummyUser(action.data);\n          break;\n        case FOLLOW_FAILURE : \n          draft.followLoading = false;\n          draft.followError = action.error;\n          break;  \n        \n        //unfollow\n        case UNFOLLOW_REQUEST : \n          draft.unfollowLoading = true;\n          draft.unfollowError = null; //로딩할때는 error는 없애준다. \n          draft.unfollowDone = false;\n        break;\n        case UNFOLLOW_SUCCESS : \n          draft.unfollowLoading =  false;\n          draft.unfollowDone = true;\n          draft.me = dummyUser(action.data);\n          break;\n        case UNFOLLOW_FAILURE : \n          draft.unfollowLoading = false;\n          draft.unfollowError = action.error;\n          break;\n  \n      default:\n        break;\n    }\n  });\n}\n\nexport default reducer;\n"],"mappings":";;;AAAA,OAAOA,OAAO,MAAM,OAAO;AAE3B,OAAO,IAAMC,YAAY,GAAG;EAC1BC,aAAa,EAAE,KAAK;EACpBC,UAAU,EAAE,KAAK;EACjBC,WAAW,EAAE,IAAI;EACjBC,eAAe,EAAE,KAAK;EACtBC,YAAY,EAAE,KAAK;EACnBC,aAAa,EAAE,IAAI;EACnBC,YAAY,EAAE,KAAK;EAAE;EACrBC,SAAS,EAAE,KAAK;EAChBC,UAAU,EAAE,IAAI;EAAE;EAClBC,aAAa,EAAE,KAAK;EAAE;EACtBC,UAAU,EAAE,KAAK;EACjBC,WAAW,EAAE,IAAI;EACjBC,aAAa,EAAE,KAAK;EAAE;EACtBC,UAAU,EAAE,KAAK;EACjBC,WAAW,EAAE,IAAI;EACjBC,qBAAqB,EAAE,KAAK;EAAE;EAC9BC,kBAAkB,EAAE,KAAK;EACzBC,mBAAmB,EAAE,IAAI;EACzBC,EAAE,EAAE,IAAI;EAAE;EACVC,UAAU,EAAE,CAAC,CAAC;EACdC,SAAS,EAAE,CAAC;AACd,CAAC;;AAED;AACA,OAAO,IAAMC,cAAc,GAAG,gBAAgB;AAC9C,OAAO,IAAMC,cAAc,GAAG,gBAAgB;AAC9C,OAAO,IAAMC,cAAc,GAAG,gBAAgB;AAE9C,OAAO,IAAMC,eAAe,GAAG,iBAAiB;AAChD,OAAO,IAAMC,eAAe,GAAG,iBAAiB;AAChD,OAAO,IAAMC,eAAe,GAAG,iBAAiB;AAEhD,OAAO,IAAMC,eAAe,GAAG,iBAAiB;AAChD,OAAO,IAAMC,eAAe,GAAG,iBAAiB;AAChD,OAAO,IAAMC,eAAe,GAAG,iBAAiB;AAEhD,OAAO,IAAMC,uBAAuB,GAAG,yBAAyB;AAChE,OAAO,IAAMC,uBAAuB,GAAG,yBAAyB;AAChE,OAAO,IAAMC,uBAAuB,GAAG,yBAAyB;AAEhE,OAAO,IAAMC,cAAc,GAAG,gBAAgB;AAC9C,OAAO,IAAMC,cAAc,GAAG,gBAAgB;AAC9C,OAAO,IAAMC,cAAc,GAAG,gBAAgB;AAE9C,OAAO,IAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,IAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,IAAMC,gBAAgB,GAAG,kBAAkB;;AAElD;AACA;AACA,OAAO,IAAMC,cAAc,GAAG,gBAAgB;AAC9C,OAAO,IAAMC,iBAAiB,GAAG,mBAAmB;AAEpD,IAAMC,SAAS,GAAG,SAAZA,SAAS,CAAIC,IAAI;EAAA,uCAClBA,IAAI;IACPC,QAAQ,EAAG,KAAK;IAChBC,EAAE,EAAE,CAAC;IACL;IACAC,KAAK,EAAE,CAAC;MAACD,EAAE,EAAE;IAAC,CAAC,CAAC;IAChBE,UAAU,EAAE,CAAC;MAACH,QAAQ,EAAE;IAAK,CAAC,EAAE;MAACA,QAAQ,EAAE;IAAI,CAAC,EAAE;MAACA,QAAQ,EAAE;IAAM,CAAC,CAAC;IACrEI,SAAS,EAAE,CAAC;MAACJ,QAAQ,EAAE;IAAK,CAAC,EAAE;MAACA,QAAQ,EAAE;IAAI,CAAC,EAAE;MAACA,QAAQ,EAAE;IAAM,CAAC;EAAC;AAAA,CACpE;;AAEF;AACA;AACA,OAAO,IAAMK,kBAAkB,GAAG,SAArBA,kBAAkB,CAAIN,IAAI,EAAK;EAC1C,OAAO;IACLO,IAAI,EAAG,gBAAgB;IACvBP,IAAI,EAAJA;EACF,CAAC;AACH,CAAC;AAED,OAAO,IAAMQ,mBAAmB,GAAG,SAAtBA,mBAAmB,GAAS;EACvC,OAAO;IACLD,IAAI,EAAG;EACT,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;;AAEA,IAAME,OAAO,GAAG,SAAVA,OAAO,GAAqC;EAAA,IAAjCC,KAAK,uEAAGrD,YAAY;EAAA,IAAEsD,MAAM;EAC3C,OAAOvD,OAAO,CAACsD,KAAK,EAAE,UAACE,KAAK,EAAK;IAAE;IACjC,QAAQD,MAAM,CAACJ,IAAI;MACjB;MACA,KAAK5B,cAAc;QACjBiC,KAAK,CAAChD,YAAY,GAAG,IAAI;QACzBgD,KAAK,CAAC9C,UAAU,GAAG,IAAI,CAAC,CAAC;QACzB8C,KAAK,CAAC/C,SAAS,GAAG,KAAK;QACvB;MACF,KAAKe,cAAc;QACjBgC,KAAK,CAAChD,YAAY,GAAI,KAAK;QAC3BgD,KAAK,CAAC/C,SAAS,GAAG,IAAI;QACtB+C,KAAK,CAACpC,EAAE,GAAGuB,SAAS,CAACY,MAAM,CAACX,IAAI,CAAC;QACjC;MACF,KAAKnB,cAAc;QACjB+B,KAAK,CAAChD,YAAY,GAAG,KAAK;QAC1BgD,KAAK,CAAC9C,UAAU,GAAG6C,MAAM,CAACE,KAAK;QAC/B;;MAEF;MACA,KAAK/B,eAAe;QAClB8B,KAAK,CAAC7C,aAAa,GAAG,IAAI;QAC1B6C,KAAK,CAAC5C,UAAU,GAAG,KAAK;QACxB4C,KAAK,CAAC3C,WAAW,GAAG,IAAI;QACxB;MAEF,KAAKc,eAAe;QAClB6B,KAAK,CAAC7C,aAAa,GAAG,KAAK;QAC3B6C,KAAK,CAAC5C,UAAU,GAAG,IAAI;QACvB4C,KAAK,CAACpC,EAAE,GAAG,IAAI;QACf;MAEF,KAAKQ,eAAe;QAClB4B,KAAK,CAAC7C,aAAa,GAAG,KAAK;QAC3B6C,KAAK,CAAC3C,WAAW,GAAG0C,MAAM,CAACE,KAAK;QAChC;;MAEA;MACF,KAAK5B,eAAe;QAClB2B,KAAK,CAAC1C,aAAa,GAAG,IAAI;QAC1B0C,KAAK,CAACzC,UAAU,GAAG,KAAK;QACxByC,KAAK,CAACxC,WAAW,GAAG,IAAI;QACxB;MACF,KAAKc,eAAe;QAClB0B,KAAK,CAAC1C,aAAa,GAAG,KAAK;QAC3B0C,KAAK,CAACzC,UAAU,GAAG,IAAI;QACvB;MACF,KAAKgB,eAAe;QAClByB,KAAK,CAAC1C,aAAa,GAAG,KAAK;QAC3B0C,KAAK,CAACxC,WAAW,GAAGuC,MAAM,CAACE,KAAK;QAChC;;MAEA;MACF,KAAKzB,uBAAuB;QAC1BwB,KAAK,CAACvC,qBAAqB,GAAG,IAAI;QAClCuC,KAAK,CAACtC,kBAAkB,GAAG,KAAK;QAChCsC,KAAK,CAACrC,mBAAmB,GAAG,IAAI;QAChC;MACF,KAAKc,uBAAuB;QAC1BuB,KAAK,CAACvC,qBAAqB,GAAG,KAAK;QACnCuC,KAAK,CAACtC,kBAAkB,GAAG,IAAI;QAC/B;MACF,KAAKgB,uBAAuB;QAC1BsB,KAAK,CAACvC,qBAAqB,GAAG,KAAK;QACnCuC,KAAK,CAACrC,mBAAmB,GAAGoC,MAAM,CAACE,KAAK;QACxC;;MAEF;MACA,KAAKhB,cAAc;QACjBe,KAAK,CAACpC,EAAE,CAAC2B,KAAK,CAACW,OAAO,CAAC;UAACZ,EAAE,EAAES,MAAM,CAACX;QAAI,CAAC,CAAC;QACzC;MACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;MAEQ;MACA,KAAKF,iBAAiB;QACpBc,KAAK,CAACpC,EAAE,CAAC2B,KAAK,GAAGS,KAAK,CAACpC,EAAE,CAAC2B,KAAK,CAACY,MAAM,CAAC,UAACC,CAAC;UAAA,OAAKA,CAAC,CAACd,EAAE,KAAKS,MAAM,CAACX,IAAI;QAAA,EAAC;QACnE;MACA;AACV;AACA;AACA;AACA;AACA;AACA;;MAEQ;MACA,KAAKT,cAAc;QACjBqB,KAAK,CAACtD,aAAa,GAAG,IAAI;QAC1BsD,KAAK,CAACpD,WAAW,GAAG,IAAI,CAAC,CAAC;QAC1BoD,KAAK,CAACrD,UAAU,GAAG,KAAK;QACxB;MACF,KAAKiC,cAAc;QACjBoB,KAAK,CAACtD,aAAa,GAAI,KAAK;QAC5BsD,KAAK,CAACrD,UAAU,GAAG,IAAI;QACvBqD,KAAK,CAACpC,EAAE,GAAGuB,SAAS,CAACY,MAAM,CAACX,IAAI,CAAC;QACjC;MACF,KAAKP,cAAc;QACjBmB,KAAK,CAACtD,aAAa,GAAG,KAAK;QAC3BsD,KAAK,CAACpD,WAAW,GAAGmD,MAAM,CAACE,KAAK;QAChC;;MAEF;MACA,KAAKnB,gBAAgB;QACnBkB,KAAK,CAACnD,eAAe,GAAG,IAAI;QAC5BmD,KAAK,CAACjD,aAAa,GAAG,IAAI,CAAC,CAAC;QAC5BiD,KAAK,CAAClD,YAAY,GAAG,KAAK;QAC5B;MACA,KAAKiC,gBAAgB;QACnBiB,KAAK,CAACnD,eAAe,GAAI,KAAK;QAC9BmD,KAAK,CAAClD,YAAY,GAAG,IAAI;QACzBkD,KAAK,CAACpC,EAAE,GAAGuB,SAAS,CAACY,MAAM,CAACX,IAAI,CAAC;QACjC;MACF,KAAKJ,gBAAgB;QACnBgB,KAAK,CAACnD,eAAe,GAAG,KAAK;QAC7BmD,KAAK,CAACjD,aAAa,GAAGgD,MAAM,CAACE,KAAK;QAClC;MAEJ;QACE;IAAM;EAEZ,CAAC,CAAC;AACJ,CAAC;AAED,eAAeJ,OAAO"},"metadata":{},"sourceType":"module"}