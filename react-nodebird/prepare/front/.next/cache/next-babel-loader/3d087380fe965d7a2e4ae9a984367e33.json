{"ast":null,"code":"function _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(addPost),\n  _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(removePost),\n  _marked3 = /*#__PURE__*/_regeneratorRuntime().mark(addComment),\n  _marked4 = /*#__PURE__*/_regeneratorRuntime().mark(loadPosts),\n  _marked5 = /*#__PURE__*/_regeneratorRuntime().mark(follow),\n  _marked6 = /*#__PURE__*/_regeneratorRuntime().mark(unfollow),\n  _marked7 = /*#__PURE__*/_regeneratorRuntime().mark(watchFollow),\n  _marked8 = /*#__PURE__*/_regeneratorRuntime().mark(watchUnfollow),\n  _marked9 = /*#__PURE__*/_regeneratorRuntime().mark(watchLoadPosts),\n  _marked10 = /*#__PURE__*/_regeneratorRuntime().mark(watchAddPost),\n  _marked11 = /*#__PURE__*/_regeneratorRuntime().mark(watchRemovePost),\n  _marked12 = /*#__PURE__*/_regeneratorRuntime().mark(watchAddComment),\n  _marked13 = /*#__PURE__*/_regeneratorRuntime().mark(postSaga);\nimport { take, put, delay, takeLatest, all, fork, call } from 'redux-saga/effects';\nimport shortId from 'shortid';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME, FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE } from '../reducers/user';\nimport { throttle } from 'redux-saga/effects';\n\n//addPost\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime().wrap(function addPost$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.prev = 0;\n        _context.next = 3;\n        return call(addPostAPI, action.data);\n      case 3:\n        result = _context.sent;\n        _context.next = 6;\n        return put({\n          type: ADD_POST_SUCCESS,\n          data: result.data\n        });\n      case 6:\n        _context.next = 8;\n        return put({\n          type: ADD_POST_TO_ME,\n          data: result.data.id\n        });\n      case 8:\n        _context.next = 15;\n        break;\n      case 10:\n        _context.prev = 10;\n        _context.t0 = _context[\"catch\"](0);\n        console.log(\"에러확인\", _context.t0);\n        _context.next = 15;\n        return put({\n          type: ADD_POST_FAILURE,\n          data: _context.t0.response.data\n        });\n      case 15:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\n//removePost\nfunction removePostAPI(data) {\n  return axios[\"delete\"]('/api/post', data);\n}\nfunction removePost(action) {\n  return _regeneratorRuntime().wrap(function removePost$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.prev = 0;\n        _context2.next = 3;\n        return delay(1000);\n      case 3:\n        _context2.next = 5;\n        return put({\n          type: REMOVE_POST_SUCCESS,\n          data: action.data //게시글의 id가 담겨 있다. \n        });\n      case 5:\n        _context2.next = 7;\n        return put({\n          type: REMOVE_POST_OF_ME,\n          data: action.data\n        });\n      case 7:\n        _context2.next = 13;\n        break;\n      case 9:\n        _context2.prev = 9;\n        _context2.t0 = _context2[\"catch\"](0);\n        _context2.next = 13;\n        return put({\n          type: REMOVE_POST_FAILURE,\n          data: _context2.t0.response.data\n        });\n      case 13:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2, null, [[0, 9]]);\n}\n\n//AddComment\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data); //POST /post/1/comment\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime().wrap(function addComment$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.prev = 0;\n        _context3.next = 3;\n        return call(addPostAPI, action.data);\n      case 3:\n        result = _context3.sent;\n        _context3.next = 6;\n        return put({\n          type: ADD_COMMENT_SUCCESS,\n          data: result.data\n        });\n      case 6:\n        _context3.next = 13;\n        break;\n      case 8:\n        _context3.prev = 8;\n        _context3.t0 = _context3[\"catch\"](0);\n        console.log(\"addComment error\", _context3.t0);\n        _context3.next = 13;\n        return put({\n          type: ADD_COMMENT_FAILURE,\n          data: _context3.t0.response.data\n        });\n      case 13:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\n//loadPosts\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime().wrap(function loadPosts$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        _context4.prev = 0;\n        _context4.next = 3;\n        return call(loadPostsAPI, action.data);\n      case 3:\n        result = _context4.sent;\n        _context4.next = 6;\n        return put({\n          type: LOAD_POSTS_SUCCESS,\n          data: result.data //reducer의 action.data로 들어가서 원래 mainPosts와 합쳐진다. \n        });\n      case 6:\n        _context4.next = 13;\n        break;\n      case 8:\n        _context4.prev = 8;\n        _context4.t0 = _context4[\"catch\"](0);\n        console.log(\"loadPosts saga err 확인\", _context4.t0);\n        _context4.next = 13;\n        return put({\n          type: LOAD_POSTS_FAILURE,\n          data: _context4.t0.response.data\n        });\n      case 13:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\n//follow\nfunction followAPI(data) {\n  return axios.post('/api/unfollow');\n}\nfunction follow(action) {\n  return _regeneratorRuntime().wrap(function follow$(_context5) {\n    while (1) switch (_context5.prev = _context5.next) {\n      case 0:\n        _context5.prev = 0;\n        _context5.next = 3;\n        return delay(1000);\n      case 3:\n        _context5.next = 5;\n        return put({\n          type: FOLLOW_SUCCESS,\n          data: action.data //request 신호 받아서 success로 id data 넘겨준다. \n        });\n      case 5:\n        _context5.next = 12;\n        break;\n      case 7:\n        _context5.prev = 7;\n        _context5.t0 = _context5[\"catch\"](0);\n        console.log(\"😎\");\n        _context5.next = 12;\n        return put({\n          type: FOLLOW_FAILURE,\n          data: _context5.t0.response.data\n        });\n      case 12:\n      case \"end\":\n        return _context5.stop();\n    }\n  }, _marked5, null, [[0, 7]]);\n}\n\n//unfollow\nfunction unfollowAPI(data) {\n  return axios.post('/api/unfollow');\n}\nfunction unfollow(action) {\n  return _regeneratorRuntime().wrap(function unfollow$(_context6) {\n    while (1) switch (_context6.prev = _context6.next) {\n      case 0:\n        _context6.prev = 0;\n        _context6.next = 3;\n        return delay(1000);\n      case 3:\n        _context6.next = 5;\n        return put({\n          type: UNFOLLOW_SUCCESS,\n          data: action.data\n        });\n      case 5:\n        _context6.next = 12;\n        break;\n      case 7:\n        _context6.prev = 7;\n        _context6.t0 = _context6[\"catch\"](0);\n        console.log(\"😎\");\n        _context6.next = 12;\n        return put({\n          type: UNFOLLOW_FAILURE,\n          data: _context6.t0.response.data\n        });\n      case 12:\n        ;\n      case 13:\n      case \"end\":\n        return _context6.stop();\n    }\n  }, _marked6, null, [[0, 7]]);\n}\n\n//rootSaga 만들어 두고 원하는 비동기 action을 하나씩 넣어준다.\n//ADD_xxx_xxx이라는 action이 실행될때 까지 take = 기다리겠다 는 의미이다. \n//action이 실행되면 addPost 함수를 실행한다.\n\nfunction watchFollow() {\n  return _regeneratorRuntime().wrap(function watchFollow$(_context7) {\n    while (1) switch (_context7.prev = _context7.next) {\n      case 0:\n        _context7.next = 2;\n        return takeLatest(FOLLOW_REQUEST, follow);\n      case 2:\n      case \"end\":\n        return _context7.stop();\n    }\n  }, _marked7);\n}\nfunction watchUnfollow() {\n  return _regeneratorRuntime().wrap(function watchUnfollow$(_context8) {\n    while (1) switch (_context8.prev = _context8.next) {\n      case 0:\n        _context8.next = 2;\n        return takeLatest(UNFOLLOW_REQUEST, unfollow);\n      case 2:\n      case \"end\":\n        return _context8.stop();\n    }\n  }, _marked8);\n}\nfunction watchLoadPosts() {\n  return _regeneratorRuntime().wrap(function watchLoadPosts$(_context9) {\n    while (1) switch (_context9.prev = _context9.next) {\n      case 0:\n        _context9.next = 2;\n        return throttle(1000, LOAD_POSTS_REQUEST, loadPosts);\n      case 2:\n      case \"end\":\n        return _context9.stop();\n    }\n  }, _marked9);\n}\nfunction watchAddPost() {\n  return _regeneratorRuntime().wrap(function watchAddPost$(_context10) {\n    while (1) switch (_context10.prev = _context10.next) {\n      case 0:\n        _context10.next = 2;\n        return takeLatest(ADD_POST_REQUEST, addPost);\n      case 2:\n      case \"end\":\n        return _context10.stop();\n    }\n  }, _marked10);\n}\nfunction watchRemovePost() {\n  return _regeneratorRuntime().wrap(function watchRemovePost$(_context11) {\n    while (1) switch (_context11.prev = _context11.next) {\n      case 0:\n        _context11.next = 2;\n        return takeLatest(REMOVE_POST_REQUEST, removePost);\n      case 2:\n      case \"end\":\n        return _context11.stop();\n    }\n  }, _marked11);\n}\nfunction watchAddComment() {\n  return _regeneratorRuntime().wrap(function watchAddComment$(_context12) {\n    while (1) switch (_context12.prev = _context12.next) {\n      case 0:\n        _context12.next = 2;\n        return takeLatest(ADD_COMMENT_REQUEST, addComment);\n      case 2:\n      case \"end\":\n        return _context12.stop();\n    }\n  }, _marked12);\n}\nexport default function postSaga() {\n  return _regeneratorRuntime().wrap(function postSaga$(_context13) {\n    while (1) switch (_context13.prev = _context13.next) {\n      case 0:\n        _context13.next = 2;\n        return all([fork(watchFollow), fork(watchUnfollow), fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n      case 2:\n      case \"end\":\n        return _context13.stop();\n    }\n  }, _marked13);\n}","map":{"version":3,"names":["addPost","removePost","addComment","loadPosts","follow","unfollow","watchFollow","watchUnfollow","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga","take","put","delay","takeLatest","all","fork","call","shortId","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","throttle","addPostAPI","data","post","content","action","result","type","id","console","log","response","removePostAPI","addCommentAPI","postId","loadPostsAPI","get","followAPI","unfollowAPI"],"sources":["/Users/jinkyungjung/Documents/programming/TIL/react-nodebird/prepare/front/sagas/post.js"],"sourcesContent":["import {take, put, delay, takeLatest, all, fork, call} from 'redux-saga/effects'\nimport shortId from 'shortid';\nimport axios from 'axios';\nimport {\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, \n  REMOVE_POST_REQUEST,REMOVE_POST_SUCCESS,REMOVE_POST_FAILURE,\n  LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS,  LOAD_POSTS_FAILURE,\n  } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME, FOLLOW_REQUEST,FOLLOW_SUCCESS ,FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS ,UNFOLLOW_FAILURE } from '../reducers/user';\nimport { throttle } from 'redux-saga/effects';\n\n//addPost\nfunction addPostAPI(data) {\n  return axios.post('/post', { content: data });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id, \n    });\n  } catch (err) {\n    console.log(\"에러확인\",err)\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    })\n  }\n}\n\n//removePost\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removePostAPI, action.data)\n    yield delay(1000);\n    //post reducer 조작 부분\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data, //게시글의 id가 담겨 있다. \n    });\n    //user reducer 조작 부분\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    })\n  }\n}\n\n//AddComment\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); //POST /post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addPostAPI, action.data)\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.log(\"addComment error\", err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    })\n  }\n}\n\n//loadPosts\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data)\n    //load post 성공하면 데이터 10개를 가짜로 만들어 준다. \n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data, //reducer의 action.data로 들어가서 원래 mainPosts와 합쳐진다. \n    });\n  } catch (err) {\n    console.log(\"loadPosts saga err 확인\", err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//follow\nfunction followAPI(data) {\n  return axios.post('/api/unfollow');\n}\n\nfunction* follow(action) {\n  try {\n    //const result = yield call(followAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data, //request 신호 받아서 success로 id data 넘겨준다. \n    });\n  } catch (err) {\n    console.log(\"😎\");\n    yield put({\n      type: FOLLOW_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//unfollow\nfunction unfollowAPI(data) {\n  return axios.post('/api/unfollow');\n}\n\nfunction* unfollow(action) {\n  try {\n    //const result = yield call(followAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    console.log(\"😎\");\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      data: err.response.data,\n    })\n  };\n}\n\n\n//rootSaga 만들어 두고 원하는 비동기 action을 하나씩 넣어준다.\n//ADD_xxx_xxx이라는 action이 실행될때 까지 take = 기다리겠다 는 의미이다. \n//action이 실행되면 addPost 함수를 실행한다.\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(1000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost)\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchFollow),\n    fork(watchUnfollow),\n    fork(watchAddPost),\n    fork(watchLoadPosts),\n    fork(watchRemovePost), \n    fork(watchAddComment),\n  ])\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}