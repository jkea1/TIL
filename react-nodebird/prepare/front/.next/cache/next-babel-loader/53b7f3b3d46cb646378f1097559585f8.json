{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { HYDRATE } from 'next-redux-wrapper';\n\n//초기 값들을 initialState에 잡아 둬야 한다. \nvar initialState = {\n  user: {},\n  post: {}\n};\n\n//reducer\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE : ', action);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n    default:\n      return state;\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["HYDRATE","initialState","user","post","rootReducer","state","action","type","console","log","payload","isLoggedIn","data"],"sources":["/Users/jinkyungjung/Desktop/CODING/react-nodebird/prepare/front/reducers/index.js"],"sourcesContent":["import {HYDRATE} from 'next-redux-wrapper';\n\n//초기 값들을 initialState에 잡아 둬야 한다. \nconst initialState = {\n  user: {\n    \n  },\n  post: {\n    \n  }\n}\n\n\n//reducer\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE :  \n      console.log('HYDRATE : ', action);\n      return {...state, ...action.payload} ;\n    case 'LOG_IN' : \n      return {\n        ...state,\n        user: {\n          ...state.user,\n          isLoggedIn : true,\n          user: action.data,\n        },\n      };\n    case 'LOG_OUT' : \n      return {\n        ...state,\n        user: {\n          ...state.user,\n          isLoggedIn : false,\n          user:null,\n        },\n      };\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;\n"],"mappings":";;;AAAA,SAAQA,OAAO,QAAO,oBAAoB;;AAE1C;AACA,IAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,CAEN,CAAC;EACDC,IAAI,EAAE,CAEN;AACF,CAAC;;AAGD;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAW,GAAqC;EAAA,IAAjCC,KAAK,uEAAGJ,YAAY;EAAA,IAAEK,MAAM;EAC/C,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKP,OAAO;MACVQ,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEH,MAAM,CAAC;MACjC,uCAAWD,KAAK,GAAKC,MAAM,CAACI,OAAO;IACrC,KAAK,QAAQ;MACX,uCACKL,KAAK;QACRH,IAAI,kCACCG,KAAK,CAACH,IAAI;UACbS,UAAU,EAAG,IAAI;UACjBT,IAAI,EAAEI,MAAM,CAACM;QAAI;MAClB;IAEL,KAAK,SAAS;MACZ,uCACKP,KAAK;QACRH,IAAI,kCACCG,KAAK,CAACH,IAAI;UACbS,UAAU,EAAG,KAAK;UAClBT,IAAI,EAAC;QAAI;MACV;IAEL;MACE,OAAOG,KAAK;EAAC;AAEnB,CAAC;AAED,eAAeD,WAAW"},"metadata":{},"sourceType":"module"}