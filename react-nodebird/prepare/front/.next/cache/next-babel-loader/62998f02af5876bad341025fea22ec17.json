{"ast":null,"code":"import { take, put, call, delay, takeLatest, all, fork } from 'redux-saga/effects';\nimport shortId from 'shortid';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\n//addPost\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        //id: id 와 같은 표현이다. \n        content: action.data //addPost로 받은 게시글 data를 리듀서의 'ADD_POST_SUCCESS'로 넘겨준다. \n      }\n    });\n\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    console.log(\"에러확인\", err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//removePost\nfunction RemovePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removePostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: {\n        id,\n        //id: id 와 같은 표현이다. \n        content: action.data\n      }\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//AddComment\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  console.log(\"addComment_saga_확인\");\n  try {\n    //const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.log(\"addComment error\", err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//rootSaga 만들어 두고 원하는 비동기 action을 하나씩 넣어준다.\n//ADD_xxx_xxx이라는 action이 실행될때 까지 take = 기다리겠다 는 의미이다. \n//action이 실행되면 addPost 함수를 실행한다.\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["take","put","call","delay","takeLatest","all","fork","shortId","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","addPost","action","id","generate","type","content","err","console","log","response","RemovePostAPI","delete","removePost","REMOVE_POST_SUCCESS","addCommentAPI","postId","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["/Users/jinkyungjung/Desktop/CODING/react-nodebird/prepare/front/sagas/post.js"],"sourcesContent":["import {take, put, call, delay, takeLatest, all, fork} from 'redux-saga/effects'\nimport shortId from 'shortid';\nimport axios from 'axios';\nimport {\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, \n  REMOVE_POST_REQUEST, REMOVE_POST_FAILURE\n  } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\n//addPost\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id, //id: id 와 같은 표현이다. \n        content : action.data, //addPost로 받은 게시글 data를 리듀서의 'ADD_POST_SUCCESS'로 넘겨준다. \n      },\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id, \n    });\n  } catch (err) {\n    console.log(\"에러확인\",err)\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    })\n  }\n}\n\n//removePost\nfunction RemovePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removePostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: {\n        id, //id: id 와 같은 표현이다. \n        content : action.data, \n      },\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data, \n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    })\n  }\n}\n\n//AddComment\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  console.log(\"addComment_saga_확인\");\n  try {\n    //const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    console.log(\"addComment error\", err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    })\n  }\n}\n\n\n//rootSaga 만들어 두고 원하는 비동기 action을 하나씩 넣어준다.\n//ADD_xxx_xxx이라는 action이 실행될때 까지 take = 기다리겠다 는 의미이다. \n//action이 실행되면 addPost 함수를 실행한다.\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost)\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchRemovePost), \n    fork(watchAddComment),\n  ])\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}