{"ast":null,"code":"var _this = this,\n  _jsxFileName = \"/Users/jinkyungjung/Desktop/CODING/react-nodebird/prepare/front/pages/index.js\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport AppLayout from '../components/AppLayout';\nimport Head from 'next/head';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\n\n//<AppLayout>으로 감싸진 애들이 children이 된다. \n//의미있는 단위로 컴포넌트를 나눠주면 된다. \nvar Home = function Home() {\n  _s();\n  var dispatch = useDispatch();\n  var _useSelector = useSelector(function (state) {\n      return state.user;\n    }),\n    me = _useSelector.me;\n  var _useSelector2 = useSelector(function (state) {\n      return state.post;\n    }),\n    mainPosts = _useSelector2.mainPosts,\n    hasMorePosts = _useSelector2.hasMorePosts;\n\n  //main page 불러올때 LOAD_POSTS_REQUEST 가 호출된다. \n  //빈 배열만 넣는다면 componentdidmount 효과를 낼 수 있다. \n  //로딩을 초기에만 1번한다. \n\n  useEffect(function () {\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []);\n\n  //스크롤 내려서 끝까지 갔을때 다시 로딩하게 한다. \n  useEffect(function () {\n    //스크롤이 얼마나 됐는지도 알려주는 함수이다. \n    function onScroll() {\n      console.log(\"너비\", window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n      //게시물을 다 내렸을 때 새로운 개시물을 로딩한다. \n      if (window.scrollY + document.documentElement.clientHeight === document.documentElement.scrollHeight) {\n        if (hasMorePosts && !loadpostsLoading) {\n          dispatch({\n            type: LOAD_POSTS_REQUEST\n          });\n        }\n      }\n    }\n    ;\n    window.addEventListener('scroll', onScroll);\n\n    //useEffect에서 window.addEventListener() 할 때는 return을 꼭 해줘야 한다.\n    //removeEventListener()로 앞에서 쌓여 있는걸 지워줘야 한다. 아니면 posts가 계속 쌓인다. \n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePosts]);\n  return __jsx(AppLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, me && __jsx(PostForm, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 14\n    }\n  }), mainPosts.map(function (post) {\n    return __jsx(PostCard, {\n      key: post.id,\n      post: post,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 32\n      }\n    });\n  }));\n};\n_s(Home, \"oF8GUQj/HT/Y/vfEI7WjH+eVPtY=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","AppLayout","Head","useSelector","useDispatch","PostForm","PostCard","LOAD_POSTS_REQUEST","Home","dispatch","state","user","me","post","mainPosts","hasMorePosts","type","onScroll","console","log","window","scrollY","document","documentElement","clientHeight","scrollHeight","loadpostsLoading","addEventListener","removeEventListener","map","id"],"sources":["/Users/jinkyungjung/Desktop/CODING/react-nodebird/prepare/front/pages/index.js"],"sourcesContent":["import React, {useEffect} from 'react';\nimport AppLayout from '../components/AppLayout';\nimport Head from 'next/head';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\n\n\n//<AppLayout>으로 감싸진 애들이 children이 된다. \n//의미있는 단위로 컴포넌트를 나눠주면 된다. \nconst Home = () => {\n  const dispatch = useDispatch();\n  const {me} = useSelector((state) => state.user);\n  const {mainPosts, hasMorePosts} = useSelector((state) => state.post);\n\n  //main page 불러올때 LOAD_POSTS_REQUEST 가 호출된다. \n  //빈 배열만 넣는다면 componentdidmount 효과를 낼 수 있다. \n  //로딩을 초기에만 1번한다. \n\n  useEffect(() => {\n    dispatch({\n      type: LOAD_POSTS_REQUEST,\n    })\n  }, []);\n\n  //스크롤 내려서 끝까지 갔을때 다시 로딩하게 한다. \n  useEffect(() => {\n    //스크롤이 얼마나 됐는지도 알려주는 함수이다. \n    function onScroll() {\n      console.log(\"너비\",window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n      //게시물을 다 내렸을 때 새로운 개시물을 로딩한다. \n      if(window.scrollY + document.documentElement.clientHeight === document.documentElement.scrollHeight) {\n        if(hasMorePosts && !loadpostsLoading) {\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n          });\n        }\n      }\n    };\n    \n    window.addEventListener('scroll', onScroll);\n\n    //useEffect에서 window.addEventListener() 할 때는 return을 꼭 해줘야 한다.\n    //removeEventListener()로 앞에서 쌓여 있는걸 지워줘야 한다. 아니면 posts가 계속 쌓인다. \n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePosts]);\n\n  return (\n    <AppLayout>\n      {me && <PostForm />}\n      {mainPosts.map((post) => <PostCard key={post.id} post={post}/>)}\n    </AppLayout>\n  );\n}\n\nexport default Home;"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAGC,SAAS,QAAO,OAAO;AACtC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,IAAI,MAAM,WAAW;AAC5B,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,kBAAkB,QAAQ,kBAAkB;;AAGrD;AACA;AACA,IAAMC,IAAI,GAAG,SAAPA,IAAI,GAAS;EAAA;EACjB,IAAMC,QAAQ,GAAGL,WAAW,EAAE;EAC9B,mBAAaD,WAAW,CAAC,UAACO,KAAK;MAAA,OAAKA,KAAK,CAACC,IAAI;IAAA,EAAC;IAAxCC,EAAE,gBAAFA,EAAE;EACT,oBAAkCT,WAAW,CAAC,UAACO,KAAK;MAAA,OAAKA,KAAK,CAACG,IAAI;IAAA,EAAC;IAA7DC,SAAS,iBAATA,SAAS;IAAEC,YAAY,iBAAZA,YAAY;;EAE9B;EACA;EACA;;EAEAf,SAAS,CAAC,YAAM;IACdS,QAAQ,CAAC;MACPO,IAAI,EAAET;IACR,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAP,SAAS,CAAC,YAAM;IACd;IACA,SAASiB,QAAQ,GAAG;MAClBC,OAAO,CAACC,GAAG,CAAC,IAAI,EAACC,MAAM,CAACC,OAAO,EAAEC,QAAQ,CAACC,eAAe,CAACC,YAAY,EAAEF,QAAQ,CAACC,eAAe,CAACE,YAAY,CAAC;MAC9G;MACA,IAAGL,MAAM,CAACC,OAAO,GAAGC,QAAQ,CAACC,eAAe,CAACC,YAAY,KAAKF,QAAQ,CAACC,eAAe,CAACE,YAAY,EAAE;QACnG,IAAGV,YAAY,IAAI,CAACW,gBAAgB,EAAE;UACpCjB,QAAQ,CAAC;YACPO,IAAI,EAAET;UACR,CAAC,CAAC;QACJ;MACF;IACF;IAAC;IAEDa,MAAM,CAACO,gBAAgB,CAAC,QAAQ,EAAEV,QAAQ,CAAC;;IAE3C;IACA;IACA,OAAO,YAAM;MACXG,MAAM,CAACQ,mBAAmB,CAAC,QAAQ,EAAEX,QAAQ,CAAC;IAChD,CAAC;EACH,CAAC,EAAE,CAACF,YAAY,CAAC,CAAC;EAElB,OACE,MAAC,SAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACPH,EAAE,IAAI,MAAC,QAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,EAClBE,SAAS,CAACe,GAAG,CAAC,UAAChB,IAAI;IAAA,OAAK,MAAC,QAAQ;MAAC,GAAG,EAAEA,IAAI,CAACiB,EAAG;MAAC,IAAI,EAAEjB,IAAK;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAE;EAAA,EAAC,CACrD;AAEhB,CAAC;AAAA,GA7CKL,IAAI;EAAA,QACSJ,WAAW,EACfD,WAAW,EACUA,WAAW;AAAA;AAAA,KAHzCK,IAAI;AA+CV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module"}