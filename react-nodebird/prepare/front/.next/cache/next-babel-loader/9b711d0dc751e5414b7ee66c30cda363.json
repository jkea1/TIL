{"ast":null,"code":"function _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(addPost),\n  _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(addComment),\n  _marked3 = /*#__PURE__*/_regeneratorRuntime().mark(watchAddPost),\n  _marked4 = /*#__PURE__*/_regeneratorRuntime().mark(watchAddComment),\n  _marked5 = /*#__PURE__*/_regeneratorRuntime().mark(postSaga);\nimport { take, put, call, delay, takeLatest, all, fork } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\n//AddPost\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime().wrap(function addPost$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.prev = 0;\n        _context.next = 3;\n        return delay(1000);\n      case 3:\n        id = shortId.generate();\n        _context.next = 6;\n        return put({\n          type: ADD_POST_SUCCESS,\n          data: {\n            id: id,\n            content: action.data //addPost로 받은 게시글 data를 리듀서의 'ADD_POST_SUCCESS'로 넘겨준다. \n          }\n        });\n      case 6:\n        _context.next = 8;\n        return put({\n          type: ADD_POST_TO_ME\n        });\n      case 8:\n        _context.next = 14;\n        break;\n      case 10:\n        _context.prev = 10;\n        _context.t0 = _context[\"catch\"](0);\n        _context.next = 14;\n        return put({\n          type: ADD_POST_FAILURE,\n          data: _context.t0.response.data\n        });\n      case 14:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\n//AddComment\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/\".concat(data.postId, \"/comment\"), data);\n}\nfunction addComment(action) {\n  return _regeneratorRuntime().wrap(function addComment$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.prev = 0;\n        _context2.next = 3;\n        return delay(1000);\n      case 3:\n        _context2.next = 5;\n        return put({\n          type: ADD_COMMENT_SUCCESS,\n          data: action.data\n        });\n      case 5:\n        _context2.next = 11;\n        break;\n      case 7:\n        _context2.prev = 7;\n        _context2.t0 = _context2[\"catch\"](0);\n        _context2.next = 11;\n        return put({\n          type: ADD_COMMENT_FAILURE,\n          data: _context2.t0.response.data\n        });\n      case 11:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\n//rootSaga 만들어 두고 원하는 비동기 action을 하나씩 넣어준다.\n//ADD_xxx_xxx이라는 action이 실행될때 까지 take = 기다리겠다 는 의미이다. \n//action이 실행되면 addPost 함수를 실행한다.\n\nfunction watchAddPost() {\n  return _regeneratorRuntime().wrap(function watchAddPost$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.next = 2;\n        return takeLatest(ADD_POST_REQUEST, addPost);\n      case 2:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _marked3);\n}\nfunction watchAddComment() {\n  return _regeneratorRuntime().wrap(function watchAddComment$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        _context4.next = 2;\n        return takeLatest(ADD_COMMENT_REQUEST, addComment);\n      case 2:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, _marked4);\n}\nexport default function postSaga() {\n  return _regeneratorRuntime().wrap(function postSaga$(_context5) {\n    while (1) switch (_context5.prev = _context5.next) {\n      case 0:\n        _context5.next = 2;\n        return all([fork(watchAddPost), fork(watchAddComment)]);\n      case 2:\n      case \"end\":\n        return _context5.stop();\n    }\n  }, _marked5);\n}","map":{"version":3,"names":["addPost","addComment","watchAddPost","watchAddComment","postSaga","take","put","call","delay","takeLatest","all","fork","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","addPostAPI","data","post","action","id","shortId","generate","type","content","response","addCommentAPI","postId"],"sources":["/Users/jinkyungjung/Desktop/CODING/react-nodebird/prepare/front/sagas/post.js"],"sourcesContent":["import {take, put, call, delay, takeLatest, all, fork} from 'redux-saga/effects'\nimport axios from 'axios';\nimport {\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE\n  } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\n//AddPost\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content : action.data, //addPost로 받은 게시글 data를 리듀서의 'ADD_POST_SUCCESS'로 넘겨준다. \n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n    })\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    })\n  }\n}\n\n//AddComment\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    })\n  }\n}\n\n\n//rootSaga 만들어 두고 원하는 비동기 action을 하나씩 넣어준다.\n//ADD_xxx_xxx이라는 action이 실행될때 까지 take = 기다리겠다 는 의미이다. \n//action이 실행되면 addPost 함수를 실행한다.\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchAddComment),\n  ])\n}"],"mappings":"+CACA;AAAA,sDAYUA,OAAO;EAAA,mDA4BPC,UAAU;EAAA,mDAqBVC,YAAY;EAAA,mDAIZC,eAAe;EAAA,mDAKAC,QAAQ;AAvEjC,SAAQC,IAAI,EAAEC,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAEC,UAAU,EAAEC,GAAG,EAAEC,IAAI,QAAO,oBAAoB;AAChF,OAAOC,KAAK,MAAM,OAAO;AACzB,SACEC,gBAAgB,EAAEC,gBAAgB,EAAEC,gBAAgB,EACpDC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,QACtD,kBAAkB;AAC3B,SAASC,cAAc,QAAQ,kBAAkB;;AAEjD;AACA,SAASC,UAAU,CAACC,IAAI,EAAE;EACxB,OAAOT,KAAK,CAACU,IAAI,CAAC,WAAW,EAAED,IAAI,CAAC;AACtC;AAEA,SAAUrB,OAAO,CAACuB,MAAM;EAAA;EAAA;IAAA;MAAA;QAAA;QAAA;QAGpB,OAAMf,KAAK,CAAC,IAAI,CAAC;MAAA;QACXgB,EAAE,GAAGC,OAAO,CAACC,QAAQ,EAAE;QAAA;QAC7B,OAAMpB,GAAG,CAAC;UACRqB,IAAI,EAAEb,gBAAgB;UACtBO,IAAI,EAAE;YACJG,EAAE,EAAFA,EAAE;YACFI,OAAO,EAAGL,MAAM,CAACF,IAAI,CAAE;UACzB;QACF,CAAC,CAAC;MAAA;QAAA;QACF,OAAMf,GAAG,CAAC;UACRqB,IAAI,EAAER;QACR,CAAC,CAAC;MAAA;QAAA;QAAA;MAAA;QAAA;QAAA;QAAA;QAEF,OAAMb,GAAG,CAAC;UACRqB,IAAI,EAAEZ,gBAAgB;UACtBM,IAAI,EAAE,YAAIQ,QAAQ,CAACR;QACrB,CAAC,CAAC;MAAA;MAAA;QAAA;IAAA;EAAA;AAAA;;AAIN;AACA,SAASS,aAAa,CAACT,IAAI,EAAE;EAC3B,OAAOT,KAAK,CAACU,IAAI,qBAAcD,IAAI,CAACU,MAAM,eAAYV,IAAI,CAAC;AAC7D;AAEA,SAAUpB,UAAU,CAACsB,MAAM;EAAA;IAAA;MAAA;QAAA;QAAA;QAGvB,OAAMf,KAAK,CAAC,IAAI,CAAC;MAAA;QAAA;QACjB,OAAMF,GAAG,CAAC;UACRqB,IAAI,EAAEV,mBAAmB;UACzBI,IAAI,EAAEE,MAAM,CAACF;QACf,CAAC,CAAC;MAAA;QAAA;QAAA;MAAA;QAAA;QAAA;QAAA;QAEF,OAAMf,GAAG,CAAC;UACRqB,IAAI,EAAET,mBAAmB;UACzBG,IAAI,EAAE,aAAIQ,QAAQ,CAACR;QACrB,CAAC,CAAC;MAAA;MAAA;QAAA;IAAA;EAAA;AAAA;;AAKN;AACA;AACA;;AAEA,SAAUnB,YAAY;EAAA;IAAA;MAAA;QAAA;QACpB,OAAMO,UAAU,CAACI,gBAAgB,EAAEb,OAAO,CAAC;MAAA;MAAA;QAAA;IAAA;EAAA;AAAA;AAG7C,SAAUG,eAAe;EAAA;IAAA;MAAA;QAAA;QACvB,OAAMM,UAAU,CAACO,mBAAmB,EAAEf,UAAU,CAAC;MAAA;MAAA;QAAA;IAAA;EAAA;AAAA;AAInD,eAAe,SAAUG,QAAQ;EAAA;IAAA;MAAA;QAAA;QAC/B,OAAMM,GAAG,CAAC,CACRC,IAAI,CAACT,YAAY,CAAC,EAClBS,IAAI,CAACR,eAAe,CAAC,CACtB,CAAC;MAAA;MAAA;QAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module"}