{"ast":null,"code":"import { take, put, call, delay, takeLatest, all, fork } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_SUCCESS, LOG_OUT_SUCCESS, LOG_IN_REQUEST, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOAD_MY_INFO_REQUEST, FOLLOW_REQUEST, UNFOLLOW_SUCCESS } from '../reducers/user';\n\n//요청이 실패할 것을 대비해서 try, catch로 감싸줘야 한다. \n//yield call해서 loginAPI를 실행한고 return 값을 result로 받는다. \n//yield put은 action을 dispatch 하는 기능을 한다. \n\n//LogIn\nfunction logInAPI(data) {\n  return axios.post('/user/login', data);\n}\nfunction* logIn(action) {\n  try {\n    //서버가 아직 안 만들어진거다. \n    const result = yield call(logInAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(\"login err\", err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n//LogOut\nfunction logOutAPI() {\n  return axios.post('/user/logout');\n}\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error(\"saga logout err\", err);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n//SignUp\nfunction signUpAPI(data) {\n  return axios.post('/user', data); //data는 서버로 req.body로 넘어간다.  \n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    console.log(\"signUp error\", err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n//rootSaga 만들어 두고 원하는 비동기 action을 하나씩 넣어준다.\n//LOG_IN_xxx이라는 action이 실행될때 까지 take = 기다리겠다 는 의미이다. \n//action이 실행되면 logIn 함수를 실행한다.\n\n//eventListener 같은 역할을 한다. \nfunction* watchLogIn() {\n  console.log(\"watchlogin 😎\");\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\nfunction* watchSignUP() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, signUp);\n}\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, signUp);\n}\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_SUCCESS, signUp);\n}\nexport default function* userSaga() {\n  yield all([fork(watchLoadUser), fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUP)]);\n}","map":{"version":3,"names":["take","put","call","delay","takeLatest","all","fork","axios","LOG_IN_SUCCESS","LOG_OUT_SUCCESS","LOG_IN_REQUEST","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOAD_MY_INFO_REQUEST","FOLLOW_REQUEST","UNFOLLOW_SUCCESS","logInAPI","data","post","logIn","action","result","type","err","console","error","response","logOutAPI","logOut","signUpAPI","signUp","log","watchLogIn","watchLogOut","watchSignUP","watchLoadUser","watchFollow","watchUnfollow","userSaga"],"sources":["/Users/jinkyungjung/Documents/programming/TIL/react-nodebird/prepare/front/sagas/user.js"],"sourcesContent":["import {take, put, call, delay, takeLatest, all, fork} from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n  LOG_IN_SUCCESS, LOG_OUT_SUCCESS, LOG_IN_REQUEST,\n  LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_FAILURE, \n  SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOAD_MY_INFO_REQUEST, FOLLOW_REQUEST, UNFOLLOW_SUCCESS,\n  } from '../reducers/user';\n\n//요청이 실패할 것을 대비해서 try, catch로 감싸줘야 한다. \n//yield call해서 loginAPI를 실행한고 return 값을 result로 받는다. \n//yield put은 action을 dispatch 하는 기능을 한다. \n\n//LogIn\nfunction logInAPI(data) {\n  return axios.post('/user/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    //서버가 아직 안 만들어진거다. \n    const result = yield call(logInAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(\"login err\", err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n//LogOut\nfunction logOutAPI() {\n  return axios.post('/user/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n    });\n  } catch (err) {\n    console.error(\"saga logout err\", err);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\n//SignUp\nfunction signUpAPI(data) {\n  return axios.post('/user', data); //data는 서버로 req.body로 넘어간다.  \n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n    });\n  } catch (err) {\n    console.log(\"signUp error\", err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\n\n//rootSaga 만들어 두고 원하는 비동기 action을 하나씩 넣어준다.\n//LOG_IN_xxx이라는 action이 실행될때 까지 take = 기다리겠다 는 의미이다. \n//action이 실행되면 logIn 함수를 실행한다.\n\n//eventListener 같은 역할을 한다. \nfunction* watchLogIn() {\n  console.log(\"watchlogin 😎\");\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUP() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, signUp);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, signUp);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_SUCCESS, signUp);\n}\n\n\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLoadUser),\n    fork(watchFollow),\n    fork(watchUnfollow),\n    fork(watchLogIn),\n    fork(watchLogOut),\n    fork(watchSignUP),\n  ])\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}