{"ast":null,"code":"var _jsxFileName = \"/Users/jinkyungjung/Documents/programming/TIL/react-nodebird/prepare/front/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport AppLayout from '../components/AppLayout';\nimport Head from 'next/head';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\n\n//<AppLayout>으로 감싸진 애들이 children이 된다. \n//의미있는 단위로 컴포넌트를 나눠주면 된다. \nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading\n  } = useSelector(state => state.post);\n\n  //main page 불러올때 LOAD_POSTS_REQUEST 가 호출된다. \n  //빈 배열만 넣는다면 componentdidmount 효과를 낼 수 있다. \n  //로딩을 초기에만 1번한다. \n  useEffect(() => {\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []);\n\n  //스크롤 내려서 끝까지 갔을때 다시 로딩하게 한다. \n  useEffect(() => {\n    //스크롤이 얼마나 됐는지도 알려주는 함수이다. \n    function onScroll() {\n      console.log(\"너비\", window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n      //게시물을 다 내렸을 때 새로운 개시물을 로딩한다. \n      if (Math.floor(window.scrollY) + document.documentElement.clientHeight === document.documentElement.scrollHeight) {\n        if (hasMorePosts && !loadPostsLoading) {\n          dispatch({\n            type: LOAD_POSTS_REQUEST\n          });\n          console.log(\"확인✅\");\n        }\n        ;\n      }\n      ;\n    }\n    ;\n\n    //useEffect에서 window.addEventListener() 할 때는 return을 꼭 해줘야 한다.\n    //removeEventListener()로 앞에서 쌓여 있는걸 지워줘야 한다. 아니면 posts가 메모리에 계속 쌓인다. \n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading]);\n  return __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, me && __jsx(PostForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 14\n    }\n  }), mainPosts.map(post => __jsx(PostCard, {\n    key: post.id,\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 32\n    }\n  })));\n};\nexport default Home;","map":{"version":3,"names":["React","useEffect","AppLayout","Head","useSelector","useDispatch","PostForm","PostCard","LOAD_POSTS_REQUEST","Home","dispatch","me","state","user","mainPosts","hasMorePosts","loadPostsLoading","post","type","onScroll","console","log","window","scrollY","document","documentElement","clientHeight","scrollHeight","Math","floor","addEventListener","removeEventListener","map","id"],"sources":["/Users/jinkyungjung/Documents/programming/TIL/react-nodebird/prepare/front/pages/index.js"],"sourcesContent":["import React, {useEffect} from 'react';\nimport AppLayout from '../components/AppLayout';\nimport Head from 'next/head';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\n\n\n//<AppLayout>으로 감싸진 애들이 children이 된다. \n//의미있는 단위로 컴포넌트를 나눠주면 된다. \nconst Home = () => {\n  const dispatch = useDispatch();\n  const {me} = useSelector((state) => state.user);\n  const {mainPosts, hasMorePosts, loadPostsLoading} = useSelector((state) => state.post);\n\n  //main page 불러올때 LOAD_POSTS_REQUEST 가 호출된다. \n  //빈 배열만 넣는다면 componentdidmount 효과를 낼 수 있다. \n  //로딩을 초기에만 1번한다. \n  useEffect(() => {\n    dispatch({\n      type: LOAD_POSTS_REQUEST,\n    });\n  }, []);\n\n  //스크롤 내려서 끝까지 갔을때 다시 로딩하게 한다. \n  useEffect(() => {\n    //스크롤이 얼마나 됐는지도 알려주는 함수이다. \n    function onScroll() {\n      console.log(\"너비\",window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n      //게시물을 다 내렸을 때 새로운 개시물을 로딩한다. \n      if(Math.floor(window.scrollY) + document.documentElement.clientHeight === document.documentElement.scrollHeight) {\n        if(hasMorePosts && !loadPostsLoading) {\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n          });\n          console.log(\"확인✅\");\n        };\n      };\n    };\n\n    //useEffect에서 window.addEventListener() 할 때는 return을 꼭 해줘야 한다.\n    //removeEventListener()로 앞에서 쌓여 있는걸 지워줘야 한다. 아니면 posts가 메모리에 계속 쌓인다. \n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading]);\n\n  return (\n    <AppLayout>\n      {me && <PostForm />}\n      {mainPosts.map((post) => <PostCard key={post.id} post={post}/>)}\n    </AppLayout>\n  );\n}\n\nexport default Home;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,QAAO,OAAO;AACtC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,IAAI,MAAM,WAAW;AAC5B,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,kBAAkB,QAAQ,kBAAkB;;AAGrD;AACA;AACA,MAAMC,IAAI,GAAG,MAAM;EACjB,MAAMC,QAAQ,GAAGL,WAAW,EAAE;EAC9B,MAAM;IAACM;EAAE,CAAC,GAAGP,WAAW,CAAEQ,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC;EAC/C,MAAM;IAACC,SAAS;IAAEC,YAAY;IAAEC;EAAgB,CAAC,GAAGZ,WAAW,CAAEQ,KAAK,IAAKA,KAAK,CAACK,IAAI,CAAC;;EAEtF;EACA;EACA;EACAhB,SAAS,CAAC,MAAM;IACdS,QAAQ,CAAC;MACPQ,IAAI,EAAEV;IACR,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAP,SAAS,CAAC,MAAM;IACd;IACA,SAASkB,QAAQ,GAAG;MAClBC,OAAO,CAACC,GAAG,CAAC,IAAI,EAACC,MAAM,CAACC,OAAO,EAAEC,QAAQ,CAACC,eAAe,CAACC,YAAY,EAAEF,QAAQ,CAACC,eAAe,CAACE,YAAY,CAAC;MAC9G;MACA,IAAGC,IAAI,CAACC,KAAK,CAACP,MAAM,CAACC,OAAO,CAAC,GAAGC,QAAQ,CAACC,eAAe,CAACC,YAAY,KAAKF,QAAQ,CAACC,eAAe,CAACE,YAAY,EAAE;QAC/G,IAAGZ,YAAY,IAAI,CAACC,gBAAgB,EAAE;UACpCN,QAAQ,CAAC;YACPQ,IAAI,EAAEV;UACR,CAAC,CAAC;UACFY,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;QACpB;QAAC;MACH;MAAC;IACH;IAAC;;IAED;IACA;IACAC,MAAM,CAACQ,gBAAgB,CAAC,QAAQ,EAAEX,QAAQ,CAAC;IAC3C,OAAO,MAAM;MACXG,MAAM,CAACS,mBAAmB,CAAC,QAAQ,EAAEZ,QAAQ,CAAC;IAChD,CAAC;EACH,CAAC,EAAE,CAACJ,YAAY,EAAEC,gBAAgB,CAAC,CAAC;EAEpC,OACE,MAAC,SAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACPL,EAAE,IAAI,MAAC,QAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,EAClBG,SAAS,CAACkB,GAAG,CAAEf,IAAI,IAAK,MAAC,QAAQ;IAAC,GAAG,EAAEA,IAAI,CAACgB,EAAG;IAAC,IAAI,EAAEhB,IAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAE,CAAC,CACrD;AAEhB,CAAC;AAED,eAAeR,IAAI"},"metadata":{},"sourceType":"module"}