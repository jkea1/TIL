{"ast":null,"code":"var _jsxFileName = \"/Users/jinkyungjung/Desktop/CODING/react-nodebird/prepare/front/components/PostForm.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useState, useRef, useEffect } from 'react';\nimport { Button, Form, Input } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addPost } from '../reducers/post';\nimport useInput from '../hooks/useInput';\nconst PostForm = () => {\n  const {\n    imagePaths,\n    addPostDone\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n\n  //게시물 텍스트\n  const [text, onChangeText, setText] = useInput('');\n  useEffect(() => {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  const onSubmit = useCallback(() => {\n    dispatch(addPost(text));\n    //게시물 개시 버튼을 누르고 서버에서 에러가 나게 되면 setText('') 로 text를 초기화 시켜 버리면 안된다. \n    //setText(''); 이거 여기에 두면 안된다. useEffect() 에서 해줘야 한다. \n  }, [text]);\n\n  //이미지 업로드\n  const imageInput = useRef();\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  return __jsx(Form, {\n    style: {\n      margin: '10px 0 20px'\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, __jsx(Input.TextArea, {\n    value: text,\n    onChange: onChangeText,\n    maxLength: 140,\n    placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }), __jsx(Button, {\n    onClick: onClickImageUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      float: 'right'\n    },\n    htmlType: \"summit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, \"\\uC9F9\\uC9F9\")), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, imagePaths.map(v => __jsx(\"div\", {\n    key: v,\n    style: {\n      display: 'inline-block'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, __jsx(\"img\", {\n    src: v,\n    style: {\n      width: '200px'\n    },\n    alt: v,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 15\n    }\n  }, \"\\uC81C\\uAC70\"))))));\n};\nexport default PostForm;","map":{"version":3,"names":["React","useCallback","useState","useRef","useEffect","Button","Form","Input","useSelector","useDispatch","addPost","useInput","PostForm","imagePaths","addPostDone","state","post","dispatch","text","onChangeText","setText","onSubmit","imageInput","onClickImageUpload","current","click","margin","float","map","v","display","width"],"sources":["/Users/jinkyungjung/Desktop/CODING/react-nodebird/prepare/front/components/PostForm.js"],"sourcesContent":["import React, {useCallback, useState, useRef, useEffect} from 'react';\nimport {Button, Form, Input} from 'antd';\nimport { useSelector, useDispatch, } from 'react-redux';\nimport { addPost } from '../reducers/post';\nimport useInput from '../hooks/useInput';\n\nconst PostForm = () => {\n  const {imagePaths, addPostDone} = useSelector((state) => state.post);\n  const dispatch = useDispatch();\n\n  //게시물 텍스트\n  const [text, onChangeText, setText] = useInput('');\n  useEffect(() => {\n    if(addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  \n  const onSubmit = useCallback(() => {\n    dispatch(addPost(text));\n    //게시물 개시 버튼을 누르고 서버에서 에러가 나게 되면 setText('') 로 text를 초기화 시켜 버리면 안된다. \n    //setText(''); 이거 여기에 두면 안된다. useEffect() 에서 해줘야 한다. \n  }, [text]);\n  \n  //이미지 업로드\n  const imageInput = useRef();\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  \n  return (\n    <Form style = {{margin: '10px 0 20px'}} encType=\"multipart/form-data\" onFinish={onSubmit}>\n      <Input.TextArea\n        value = {text}\n        onChange = {onChangeText}\n        maxLength = {140}\n        placeholder = \"어떤 신기한 일이 있었나요?\"\n      />\n      <div>\n        <input type=\"file\" multiple hidden ref={imageInput} />\n        <Button onClick = {onClickImageUpload} >이미지 업로드</Button>\n        <Button type=\"primary\" style={{float: 'right'}} htmlType=\"summit\">짹짹</Button>\n      </div>\n\n      {/* 이미지 업로드시 미리보기 부분 */}\n      <div>\n        {imagePaths.map((v) => (\n          <div key = {v} style={{display: 'inline-block'}}>\n            <img src={v} style={{ width: '200px' }} alt={v} />\n            <div>\n              <Button>제거</Button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </Form>\n  )\n}\n\nexport default PostForm"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,WAAW,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAO,OAAO;AACrE,SAAQC,MAAM,EAAEC,IAAI,EAAEC,KAAK,QAAO,MAAM;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAS,aAAa;AACvD,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,OAAOC,QAAQ,MAAM,mBAAmB;AAExC,MAAMC,QAAQ,GAAG,MAAM;EACrB,MAAM;IAACC,UAAU;IAAEC;EAAW,CAAC,GAAGN,WAAW,CAAEO,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC;EACpE,MAAMC,QAAQ,GAAGR,WAAW,EAAE;;EAE9B;EACA,MAAM,CAACS,IAAI,EAAEC,YAAY,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAClDP,SAAS,CAAC,MAAM;IACd,IAAGU,WAAW,EAAE;MACdM,OAAO,CAAC,EAAE,CAAC;IACb;EACF,CAAC,EAAE,CAACN,WAAW,CAAC,CAAC;EAEjB,MAAMO,QAAQ,GAAGpB,WAAW,CAAC,MAAM;IACjCgB,QAAQ,CAACP,OAAO,CAACQ,IAAI,CAAC,CAAC;IACvB;IACA;EACF,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;;EAEV;EACA,MAAMI,UAAU,GAAGnB,MAAM,EAAE;EAC3B,MAAMoB,kBAAkB,GAAGtB,WAAW,CAAC,MAAM;IAC3CqB,UAAU,CAACE,OAAO,CAACC,KAAK,EAAE;EAC5B,CAAC,EAAE,CAACH,UAAU,CAACE,OAAO,CAAC,CAAC;EAExB,OACE,MAAC,IAAI;IAAC,KAAK,EAAI;MAACE,MAAM,EAAE;IAAa,CAAE;IAAC,OAAO,EAAC,qBAAqB;IAAC,QAAQ,EAAEL,QAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACvF,MAAC,KAAK,CAAC,QAAQ;IACb,KAAK,EAAIH,IAAK;IACd,QAAQ,EAAIC,YAAa;IACzB,SAAS,EAAI,GAAI;IACjB,WAAW,EAAG,wEAAiB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAC/B,EACF;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACE;IAAO,IAAI,EAAC,MAAM;IAAC,QAAQ;IAAC,MAAM;IAAC,GAAG,EAAEG,UAAW;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,EACtD,MAAC,MAAM;IAAC,OAAO,EAAIC,kBAAmB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,2CAAkB,EACxD,MAAC,MAAM;IAAC,IAAI,EAAC,SAAS;IAAC,KAAK,EAAE;MAACI,KAAK,EAAE;IAAO,CAAE;IAAC,QAAQ,EAAC,QAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,kBAAY,CACzE,EAGN;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACGd,UAAU,CAACe,GAAG,CAAEC,CAAC,IAChB;IAAK,GAAG,EAAIA,CAAE;IAAC,KAAK,EAAE;MAACC,OAAO,EAAE;IAAc,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC9C;IAAK,GAAG,EAAED,CAAE;IAAC,KAAK,EAAE;MAAEE,KAAK,EAAE;IAAQ,CAAE;IAAC,GAAG,EAAEF,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,EAClD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACE,MAAC,MAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,kBAAY,CACf,CAET,CAAC,CACE,CACD;AAEX,CAAC;AAED,eAAejB,QAAQ"},"metadata":{},"sourceType":"module"}