{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport shortId from 'shortid';\n\n//대문자로 시작하는 애들은 서버에서 주는 데이터이다. \n//id가 다 붙어있어야 한다. \nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        nickname: 'nero'\n      },\n      content: '스페인 가고 싶다.'\n    }, {\n      id: shortId.generate(),\n      User: {\n        nickname: 'hero'\n      },\n      content: '나도 가고 싶다.'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\n\n//action\n//이렇게 변수로 빼주면 재활용할 수 있고 오타가 났을때 재활용 할 수 있다. \nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_REMOVE_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_REMOVE_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_REMOVE_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n//동적 action creator\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data //쓴 게시글을 받아서 보내준다. \n});\n\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data //쓴 글을 받아서 보내준다. \n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  Images: [],\n  Comments: []\n});\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  }\n});\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    //addPost\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null //null 아니라 false 된다. \n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        //mainPost가 앞에 들어가야 한다. 그래야 새로운 글이 위에 올라간다. \n        addPostLoading: false,\n        addPostDone: true\n      });\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    //addComment\n    case ADD_COMMENT_REQUEST:\n      //먼저 게시글의 id를 찾아서 게시글에 접근해서 -> 그 안에 Comments에 접근해서 정보를 넣어준다. \n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null //null 아니라 false도 된다. \n      });\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        //불변성의 유지하기 위한 코드이다. \n        //원래 있던 comment들은 유지가 되고 새로운 comment가 추가 된다. \n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        const post = _objectSpread({}, state.mainPosts[postIndex]);\n        post.Comments = [dummyComment(action.data.content), ...post.Comments]; //mainPost가 앞에 들어가야 한다. 그래야 새로운 글이 위에 올라간다. \n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = post;\n        console.log('리듀서에서 커멘트 추가 액션 성공 확인', post.Comments);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts,\n          addCommentLoading: false,\n          addCommentDone: true\n        });\n      }\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_REMOVE_REQUEST","ADD_REMOVE_SUCCESS","ADD_REMOVE_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","error","postIndex","findIndex","v","postId","post","console","log"],"sources":["/Users/jinkyungjung/Desktop/CODING/react-nodebird/prepare/front/reducers/post.js"],"sourcesContent":["import shortId from 'shortid';\n\n//대문자로 시작하는 애들은 서버에서 주는 데이터이다. \n//id가 다 붙어있어야 한다. \nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초',\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg',\n    }, {\n      id: shortId.generate(),\n      src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg',\n    }, {\n      id: shortId.generate(),\n      src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg',\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        nickname: 'nero',\n      },\n        content: '스페인 가고 싶다.',\n    }, {\n      id: shortId.generate(),\n      User: {\n        nickname: 'hero',\n      },\n      content: '나도 가고 싶다.'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n}\n\n//action\n //이렇게 변수로 빼주면 재활용할 수 있고 오타가 났을때 재활용 할 수 있다. \nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_REMOVE_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_REMOVE_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_REMOVE_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n//동적 action creator\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data, //쓴 게시글을 받아서 보내준다. \n});\n\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data, //쓴 글을 받아서 보내준다. \n});\n\nconst dummyPost = (data) => ({\n  id : data.id,\n  content: data.content,\n  User: {\n    id: 1, \n    nickname: '제로초',\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id : shortId.generate(),\n  content: data,\n  User: {\n    id: 1, \n    nickname: '제로초',\n  },\n})\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    //addPost\n    case ADD_POST_REQUEST :\n      return {\n        ...state, \n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null, //null 아니라 false 된다. \n      };\n    case ADD_POST_SUCCESS : \n      return {\n        ...state,\n        mainPosts: [dummyPost(action.data), ...state.mainPosts], //mainPost가 앞에 들어가야 한다. 그래야 새로운 글이 위에 올라간다. \n        addPostLoading: false,\n        addPostDone: true,\n      };\n    case ADD_POST_FAILURE : \n      return {\n        ...state, \n        addPostLoading: false,\n        addPostError: action.error,\n      };\n\n    //addComment\n    case ADD_COMMENT_REQUEST : //먼저 게시글의 id를 찾아서 게시글에 접근해서 -> 그 안에 Comments에 접근해서 정보를 넣어준다. \n      return {\n        ...state, \n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null, //null 아니라 false도 된다. \n      };\n      case ADD_COMMENT_SUCCESS : {\n        //불변성의 유지하기 위한 코드이다. \n        //원래 있던 comment들은 유지가 되고 새로운 comment가 추가 된다. \n        const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        const post = {...state.mainPosts[postIndex]};\n        post.Comments = [dummyComment(action.data.content), ...post.Comments]; //mainPost가 앞에 들어가야 한다. 그래야 새로운 글이 위에 올라간다. \n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = post;\n\n        console.log('리듀서에서 커멘트 추가 액션 성공 확인',post.Comments)\n        return {\n          ...state,\n          mainPosts,\n          addCommentLoading: false,\n          addCommentDone: true,\n        };\n      }\n    case ADD_COMMENT_FAILURE : \n      return {\n        ...state, \n        addCommentLoading: false,\n        addCommentError: action.error,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}