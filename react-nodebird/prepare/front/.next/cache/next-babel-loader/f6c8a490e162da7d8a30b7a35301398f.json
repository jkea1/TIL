{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\n\n//대문자로 시작하는 애들은 서버에서 주는 데이터이다. \n//id가 다 붙어있어야 한다. \nexport var initialState = {\n  mainPosts: [],\n  //서버에서 data 받아온다. \n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\n\n//faker 없을때 만들었던 dummydata\n/* {\n  id: 1,\n  User: {\n    id: 1,\n    nickname: '제로초',\n  },\n  content: '첫 번째 게시글 #해시태그 #익스프레스',\n  Images: [{\n    id: shortId.generate(),\n    src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg',\n  }, {\n    id: shortId.generate(),\n    src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg',\n  }, {\n    id: shortId.generate(),\n    src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg',\n  }],\n  Comments: [{\n    id: shortId.generate(),\n    User: {\n      nickname: 'nero',\n    },\n      content: '스페인 가고 싶다.',\n  }, {\n    id: shortId.generate(),\n    User: {\n      nickname: 'hero',\n    },\n    content: '나도 가고 싶다.'\n  }]\n} */\n\n//서버에서 정보를 불러오는 것을 아래로 대체 한다. \nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\n\n//initialState랑 형식 같게 하면된다. \ninitialState.mainPosts = initialState.mainPosts.concat();\n\n//action\n//이렇게 변수로 빼주면 재활용할 수 있고 오타가 났을때 재활용 할 수 있다. \nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n//동적 action creator\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data //쓴 게시글을 받아서 보내준다. \n  };\n};\n\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data //쓴 글을 받아서 보내준다. \n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    Images: [],\n    Comments: []\n  };\n};\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    }\n  };\n};\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      //addPost\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null; //null 아니라 false 된다. \n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data)); //mainPost가 앞에 들어가야 한다. 그래야 새로운 글이 위에 올라간다. \n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      //remove post\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null; //null 아니라 false 된다. \n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        }),\n        //조건에 맞는 게시글을 지워주고(filter) 나머지는 남는다. \n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      //addComment\n      //먼저 게시글의 id를 찾아서 게시글에 접근 -> 그 안에 Comments에 접근해서 정보를 넣어준다. \n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null; //null 아니라 false도 된다.   \n        break;\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n          /* 불변성의 유지하기 위한 코드이다. \n          원래 있던 comment들은 유지가 되고 새로운 comment가 추가 된다. \n          const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          const post = {...state.mainPosts[postIndex]};\n          post.Comments = [dummyComment(action.data.content), ...post.Comments]; //mainPost가 앞에 들어가야 한다. 그래야 새로운 글이 위에 올라간다. \n          const mainPosts = [...state.mainPosts];\n          mainPosts[postIndex] = post; */\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","concat","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","v","post","find","postId"],"sources":["/Users/jinkyungjung/Desktop/CODING/react-nodebird/prepare/front/reducers/post.js"],"sourcesContent":["import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\n\n//대문자로 시작하는 애들은 서버에서 주는 데이터이다. \n//id가 다 붙어있어야 한다. \nexport const initialState = {\n  mainPosts: [], //서버에서 data 받아온다. \n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n};\n\n//faker 없을때 만들었던 dummydata\n/* {\n  id: 1,\n  User: {\n    id: 1,\n    nickname: '제로초',\n  },\n  content: '첫 번째 게시글 #해시태그 #익스프레스',\n  Images: [{\n    id: shortId.generate(),\n    src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg',\n  }, {\n    id: shortId.generate(),\n    src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg',\n  }, {\n    id: shortId.generate(),\n    src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg',\n  }],\n  Comments: [{\n    id: shortId.generate(),\n    User: {\n      nickname: 'nero',\n    },\n      content: '스페인 가고 싶다.',\n  }, {\n    id: shortId.generate(),\n    User: {\n      nickname: 'hero',\n    },\n    content: '나도 가고 싶다.'\n  }]\n} */\n\n//서버에서 정보를 불러오는 것을 아래로 대체 한다. \nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image(),\n  }],\n  Comments: [{\n    User: {\n      id : shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence(),\n  }],\n}));\n\n//initialState랑 형식 같게 하면된다. \ninitialState.mainPosts = initialState.mainPosts.concat(\n  \n);\n\n//action\n //이렇게 변수로 빼주면 재활용할 수 있고 오타가 났을때 재활용 할 수 있다. \nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n//동적 action creator\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data, //쓴 게시글을 받아서 보내준다. \n});\n\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data, //쓴 글을 받아서 보내준다. \n});\n\nconst dummyPost = (data) => ({\n  id : data.id,\n  content: data.content,\n  User: {\n    id: 1, \n    nickname: '제로초',\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id : shortId.generate(),\n  content: data,\n  User: {\n    id: 1, \n    nickname: '제로초',\n  },\n})\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      //addPost\n      case ADD_POST_REQUEST :\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null; //null 아니라 false 된다. \n        break;\n      case ADD_POST_SUCCESS : \n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data)); //mainPost가 앞에 들어가야 한다. 그래야 새로운 글이 위에 올라간다. \n        break;\n      case ADD_POST_FAILURE : \n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      //remove post\n      case REMOVE_POST_REQUEST :\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null; //null 아니라 false 된다. \n        break;\n      case REMOVE_POST_SUCCESS : \n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data),//조건에 맞는 게시글을 지워주고(filter) 나머지는 남는다. \n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE : \n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      //addComment\n      //먼저 게시글의 id를 찾아서 게시글에 접근 -> 그 안에 Comments에 접근해서 정보를 넣어준다. \n      case ADD_COMMENT_REQUEST : \n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null; //null 아니라 false도 된다.   \n        break;\n      case ADD_COMMENT_SUCCESS : {\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n        /* 불변성의 유지하기 위한 코드이다. \n        원래 있던 comment들은 유지가 되고 새로운 comment가 추가 된다. \n        const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        const post = {...state.mainPosts[postIndex]};\n        post.Comments = [dummyComment(action.data.content), ...post.Comments]; //mainPost가 앞에 들어가야 한다. 그래야 새로운 글이 위에 올라간다. \n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = post; */\n      }\n      case ADD_COMMENT_FAILURE : \n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n}\n\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}