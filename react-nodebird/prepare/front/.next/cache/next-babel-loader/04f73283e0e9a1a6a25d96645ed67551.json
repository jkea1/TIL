{"ast":null,"code":"import { take, put, delay, takeLatest, all, fork, call } from 'redux-saga/effects';\nimport shortId from 'shortid';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME, FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE } from '../reducers/user';\nimport { throttle } from 'redux-saga/effects';\n\n//addPost\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.log(\"에러확인\", err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//removePost\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removePostAPI, action.data)\n    yield delay(1000);\n    //post reducer 조작 부분\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data //게시글의 id가 담겨 있다. \n    });\n    //user reducer 조작 부분\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//AddComment\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  console.log(\"addComment_saga_확인\");\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.log(\"addComment error\", err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//loadPosts\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\nfunction* loadPosts(action) {\n  try {\n    //const result = yield call(loadPoststAPI, action.data)\n    yield delay(1000);\n    //load post 성공하면 데이터 10개를 가짜로 만들어 준다. \n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10) //reducer의 action.data로 들어가서 원래 mainPosts와 합쳐진다. \n    });\n  } catch (err) {\n    console.log(\"loadPosts saga err 확인\", err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//follow\nfunction followAPI(data) {\n  return axios.post('/api/unfollow');\n}\nfunction* follow(action) {\n  try {\n    //const result = yield call(followAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data //request 신호 받아서 success로 id data 넘겨준다. \n    });\n  } catch (err) {\n    console.log(\"😎\");\n    yield put({\n      type: FOLLOW_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\n//unfollow\nfunction unfollowAPI(data) {\n  return axios.post('/api/unfollow');\n}\nfunction* unfollow(action) {\n  try {\n    //const result = yield call(followAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.log(\"😎\");\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      data: err.response.data\n    });\n  }\n  ;\n}\n\n//rootSaga 만들어 두고 원하는 비동기 action을 하나씩 넣어준다.\n//ADD_xxx_xxx이라는 action이 실행될때 까지 take = 기다리겠다 는 의미이다. \n//action이 실행되면 addPost 함수를 실행한다.\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\nfunction* watchLoadPosts() {\n  yield throttle(1000, LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchFollow), fork(watchUnfollow), fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["take","put","delay","takeLatest","all","fork","call","shortId","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","throttle","addPostAPI","data","post","content","addPost","action","result","type","id","err","console","log","response","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","loadPostsAPI","get","loadPosts","followAPI","follow","unfollowAPI","unfollow","watchFollow","watchUnfollow","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["/Users/jinkyungjung/Documents/programming/TIL/react-nodebird/prepare/front/sagas/post.js"],"sourcesContent":["import {take, put, delay, takeLatest, all, fork, call} from 'redux-saga/effects'\nimport shortId from 'shortid';\nimport axios from 'axios';\nimport {\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, \n  REMOVE_POST_REQUEST,REMOVE_POST_SUCCESS,REMOVE_POST_FAILURE,\n  LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS,  LOAD_POSTS_FAILURE, generateDummyPost,\n  } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME, FOLLOW_REQUEST,FOLLOW_SUCCESS ,FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS ,UNFOLLOW_FAILURE } from '../reducers/user';\nimport { throttle } from 'redux-saga/effects';\n\n//addPost\nfunction addPostAPI(data) {\n  return axios.post('/post', { content: data });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id, \n    });\n  } catch (err) {\n    console.log(\"에러확인\",err)\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    })\n  }\n}\n\n//removePost\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removePostAPI, action.data)\n    yield delay(1000);\n    //post reducer 조작 부분\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data, //게시글의 id가 담겨 있다. \n    });\n    //user reducer 조작 부분\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    })\n  }\n}\n\n//AddComment\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  console.log(\"addComment_saga_확인\");\n  try {\n    const result = yield call(addPostAPI, action.data)\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    console.log(\"addComment error\", err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    })\n  }\n}\n\n//loadPosts\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    //const result = yield call(loadPoststAPI, action.data)\n    yield delay(1000);\n    //load post 성공하면 데이터 10개를 가짜로 만들어 준다. \n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10), //reducer의 action.data로 들어가서 원래 mainPosts와 합쳐진다. \n    });\n  } catch (err) {\n    console.log(\"loadPosts saga err 확인\", err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//follow\nfunction followAPI(data) {\n  return axios.post('/api/unfollow');\n}\n\nfunction* follow(action) {\n  try {\n    //const result = yield call(followAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data, //request 신호 받아서 success로 id data 넘겨준다. \n    });\n  } catch (err) {\n    console.log(\"😎\");\n    yield put({\n      type: FOLLOW_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//unfollow\nfunction unfollowAPI(data) {\n  return axios.post('/api/unfollow');\n}\n\nfunction* unfollow(action) {\n  try {\n    //const result = yield call(followAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    console.log(\"😎\");\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      data: err.response.data,\n    })\n  };\n}\n\n\n//rootSaga 만들어 두고 원하는 비동기 action을 하나씩 넣어준다.\n//ADD_xxx_xxx이라는 action이 실행될때 까지 take = 기다리겠다 는 의미이다. \n//action이 실행되면 addPost 함수를 실행한다.\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(1000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost)\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchFollow),\n    fork(watchUnfollow),\n    fork(watchAddPost),\n    fork(watchLoadPosts),\n    fork(watchRemovePost), \n    fork(watchAddComment),\n  ])\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}