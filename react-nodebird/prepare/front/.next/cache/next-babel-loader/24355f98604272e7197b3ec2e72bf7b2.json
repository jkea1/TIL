{"ast":null,"code":"function _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(logIn),\n  _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(logOut),\n  _marked3 = /*#__PURE__*/_regeneratorRuntime().mark(signUp),\n  _marked4 = /*#__PURE__*/_regeneratorRuntime().mark(loadUser),\n  _marked5 = /*#__PURE__*/_regeneratorRuntime().mark(watchLogIn),\n  _marked6 = /*#__PURE__*/_regeneratorRuntime().mark(watchLogOut),\n  _marked7 = /*#__PURE__*/_regeneratorRuntime().mark(watchSignUP),\n  _marked8 = /*#__PURE__*/_regeneratorRuntime().mark(watchFollow),\n  _marked9 = /*#__PURE__*/_regeneratorRuntime().mark(watchUnfollow),\n  _marked10 = /*#__PURE__*/_regeneratorRuntime().mark(watchLoadUser),\n  _marked11 = /*#__PURE__*/_regeneratorRuntime().mark(userSaga);\nimport { take, put, call, delay, takeLatest, all, fork } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_SUCCESS, LOG_OUT_SUCCESS, LOG_IN_REQUEST, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_FAILURE } from '../reducers/user';\n\n//요청이 실패할 것을 대비해서 try, catch로 감싸줘야 한다. \n//yield call해서 loginAPI를 실행한고 return 값을 result로 받는다. \n//yield put은 action을 dispatch 하는 기능을 한다. \n\n//LogIn\nfunction logInAPI(data) {\n  return axios.post('/user/login', data);\n}\nfunction logIn(action) {\n  var result;\n  return _regeneratorRuntime().wrap(function logIn$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.prev = 0;\n        _context.next = 3;\n        return call(logInAPI, action.data);\n      case 3:\n        result = _context.sent;\n        _context.next = 6;\n        return put({\n          type: LOG_IN_SUCCESS,\n          data: result.data\n        });\n      case 6:\n        _context.next = 13;\n        break;\n      case 8:\n        _context.prev = 8;\n        _context.t0 = _context[\"catch\"](0);\n        console.error(\"login err\", _context.t0);\n        _context.next = 13;\n        return put({\n          type: LOG_IN_FAILURE,\n          error: _context.t0.response.data\n        });\n      case 13:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\n//LogOut\nfunction logOutAPI() {\n  return axios.post('/user/logout');\n}\nfunction logOut() {\n  return _regeneratorRuntime().wrap(function logOut$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.prev = 0;\n        _context2.next = 3;\n        return call(logOutAPI);\n      case 3:\n        _context2.next = 5;\n        return put({\n          type: LOG_OUT_SUCCESS\n        });\n      case 5:\n        _context2.next = 12;\n        break;\n      case 7:\n        _context2.prev = 7;\n        _context2.t0 = _context2[\"catch\"](0);\n        console.error(\"saga logout err\", _context2.t0);\n        _context2.next = 12;\n        return put({\n          type: LOG_OUT_FAILURE,\n          error: _context2.t0.response.data\n        });\n      case 12:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\n//SignUp\nfunction signUpAPI(data) {\n  return axios.post('/user', data); //data는 서버로 req.body로 넘어간다.  \n}\n\nfunction signUp(action) {\n  var result;\n  return _regeneratorRuntime().wrap(function signUp$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.prev = 0;\n        _context3.next = 3;\n        return call(signUpAPI, action.data);\n      case 3:\n        result = _context3.sent;\n        _context3.next = 6;\n        return put({\n          type: SIGN_UP_SUCCESS\n        });\n      case 6:\n        _context3.next = 13;\n        break;\n      case 8:\n        _context3.prev = 8;\n        _context3.t0 = _context3[\"catch\"](0);\n        console.log(\"signUp error\", _context3.t0);\n        _context3.next = 13;\n        return put({\n          type: SIGN_UP_FAILURE,\n          error: _context3.t0.response.data\n        });\n      case 13:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\n//Load my info\nfunction loadUserAPI() {\n  return axios.get('/user');\n}\nfunction loadUser(action) {\n  var result;\n  return _regeneratorRuntime().wrap(function loadUser$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        _context4.prev = 0;\n        _context4.next = 3;\n        return call(loadUserAPI, action.data);\n      case 3:\n        result = _context4.sent;\n        _context4.next = 6;\n        return put({\n          type: LOAD_MY_INFO_SUCCESS,\n          data: result.data\n        });\n      case 6:\n        _context4.next = 12;\n        break;\n      case 8:\n        _context4.prev = 8;\n        _context4.t0 = _context4[\"catch\"](0);\n        _context4.next = 12;\n        return put({\n          type: LOAD_MY_INFO_FAILURE,\n          error: _context4.t0.response.data\n        });\n      case 12:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\n//rootSaga 만들어 두고 원하는 비동기 action을 하나씩 넣어준다.\n//LOG_IN_xxx이라는 action이 실행될때 까지 take = 기다리겠다 는 의미이다. \n//action이 실행되면 logIn 함수를 실행한다.\n\n//eventListener 같은 역할을 한다. \nfunction watchLogIn() {\n  return _regeneratorRuntime().wrap(function watchLogIn$(_context5) {\n    while (1) switch (_context5.prev = _context5.next) {\n      case 0:\n        console.log(\"watchlogin 😎\");\n        _context5.next = 3;\n        return takeLatest(LOG_IN_REQUEST, logIn);\n      case 3:\n      case \"end\":\n        return _context5.stop();\n    }\n  }, _marked5);\n}\nfunction watchLogOut() {\n  return _regeneratorRuntime().wrap(function watchLogOut$(_context6) {\n    while (1) switch (_context6.prev = _context6.next) {\n      case 0:\n        _context6.next = 2;\n        return takeLatest(LOG_OUT_REQUEST, logOut);\n      case 2:\n      case \"end\":\n        return _context6.stop();\n    }\n  }, _marked6);\n}\nfunction watchSignUP() {\n  return _regeneratorRuntime().wrap(function watchSignUP$(_context7) {\n    while (1) switch (_context7.prev = _context7.next) {\n      case 0:\n        _context7.next = 2;\n        return takeLatest(SIGN_UP_REQUEST, signUp);\n      case 2:\n      case \"end\":\n        return _context7.stop();\n    }\n  }, _marked7);\n}\nfunction watchFollow() {\n  return _regeneratorRuntime().wrap(function watchFollow$(_context8) {\n    while (1) switch (_context8.prev = _context8.next) {\n      case 0:\n        _context8.next = 2;\n        return takeLatest(FOLLOW_REQUEST, follow);\n      case 2:\n      case \"end\":\n        return _context8.stop();\n    }\n  }, _marked8);\n}\nfunction watchUnfollow() {\n  return _regeneratorRuntime().wrap(function watchUnfollow$(_context9) {\n    while (1) switch (_context9.prev = _context9.next) {\n      case 0:\n        _context9.next = 2;\n        return takeLatest(UNFOLLOW_SUCCESS, unfollow);\n      case 2:\n      case \"end\":\n        return _context9.stop();\n    }\n  }, _marked9);\n}\nfunction watchLoadUser() {\n  return _regeneratorRuntime().wrap(function watchLoadUser$(_context10) {\n    while (1) switch (_context10.prev = _context10.next) {\n      case 0:\n        _context10.next = 2;\n        return takeLatest(LOAD_MY_INFO_REQUEST, loadUser);\n      case 2:\n      case \"end\":\n        return _context10.stop();\n    }\n  }, _marked10);\n}\nexport default function userSaga() {\n  return _regeneratorRuntime().wrap(function userSaga$(_context11) {\n    while (1) switch (_context11.prev = _context11.next) {\n      case 0:\n        _context11.next = 2;\n        return all([fork(watchLoadUser),\n        /* fork(watchFollow),\n        fork(watchUnfollow), */\n        fork(watchLogIn), fork(watchLogOut), fork(watchSignUP)]);\n      case 2:\n      case \"end\":\n        return _context11.stop();\n    }\n  }, _marked11);\n}","map":{"version":3,"names":["logIn","logOut","signUp","loadUser","watchLogIn","watchLogOut","watchSignUP","watchFollow","watchUnfollow","watchLoadUser","userSaga","take","put","call","delay","takeLatest","all","fork","axios","LOG_IN_SUCCESS","LOG_OUT_SUCCESS","LOG_IN_REQUEST","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_SUCCESS","LOAD_MY_INFO_FAILURE","logInAPI","data","post","action","result","type","console","error","response","logOutAPI","signUpAPI","log","loadUserAPI","get","follow","unfollow"],"sources":["/Users/jinkyungjung/Documents/programming/TIL/react-nodebird/prepare/front/sagas/user.js"],"sourcesContent":["import {take, put, call, delay, takeLatest, all, fork} from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n  LOG_IN_SUCCESS, LOG_OUT_SUCCESS, LOG_IN_REQUEST,\n  LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_FAILURE, \n  SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, \n  FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE,\n  UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE,\n  LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_FAILURE,\n  } from '../reducers/user';\n\n//요청이 실패할 것을 대비해서 try, catch로 감싸줘야 한다. \n//yield call해서 loginAPI를 실행한고 return 값을 result로 받는다. \n//yield put은 action을 dispatch 하는 기능을 한다. \n\n//LogIn\nfunction logInAPI(data) {\n  return axios.post('/user/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    //서버가 아직 안 만들어진거다. \n    const result = yield call(logInAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(\"login err\", err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\n//LogOut\nfunction logOutAPI() {\n  return axios.post('/user/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n    });\n  } catch (err) {\n    console.error(\"saga logout err\", err);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\n//SignUp\nfunction signUpAPI(data) {\n  return axios.post('/user', data); //data는 서버로 req.body로 넘어간다.  \n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n    });\n  } catch (err) {\n    console.log(\"signUp error\", err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\n//Load my info\nfunction loadUserAPI() {\n  return axios.get('/user');  \n}\n\nfunction* loadUser(action) {\n  try {\n    const result = yield call(loadUserAPI, action.data);\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_MY_INFO_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\n\n//rootSaga 만들어 두고 원하는 비동기 action을 하나씩 넣어준다.\n//LOG_IN_xxx이라는 action이 실행될때 까지 take = 기다리겠다 는 의미이다. \n//action이 실행되면 logIn 함수를 실행한다.\n\n//eventListener 같은 역할을 한다. \nfunction* watchLogIn() {\n  console.log(\"watchlogin 😎\");\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUP() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_SUCCESS, unfollow);\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadUser);\n}\n\n\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLoadUser),\n    /* fork(watchFollow),\n    fork(watchUnfollow), */\n    fork(watchLogIn),\n    fork(watchLogOut),\n    fork(watchSignUP),\n  ])\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}