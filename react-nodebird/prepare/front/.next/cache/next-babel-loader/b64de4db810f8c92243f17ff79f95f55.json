{"ast":null,"code":"var _jsxFileName = \"/Users/jinkyungjung/Desktop/CODING/react-nodebird/prepare/front/components/PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Card, Popover, Button, List, Comment } from 'antd';\nimport { EllipsisOutlined, RetweetOutlined, HeartOutlined, MessageOutlined } from '@ant-design/icons';\nimport Avatar from 'antd/lib/avatar/avatar';\nimport { HeartTwoTone } from '@ant-design/icons';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport { REMOVE_POST_REQUEST } from '../reducers/post';\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: liked,\n    1: setLiked\n  } = useState(false);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const onToggleLike = useCallback(() => {\n    setLiked(prev => !prev);\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    dispatchEvent({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  });\n  const id = useSelector(state => {\n    var _state$user;\n    return (_state$user = state.user) === null || _state$user === void 0 ? void 0 : _state$user.id;\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 35\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onToggleLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onToggleLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 15\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }\n    }), __jsx(Popover, {\n      key: \"more\",\n      content:\n      //내가 쓴글이면 수정, 삭제 가능하게 하고 남이 쓴글이면 신고가능하게 하기.\n      __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }\n      }, __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 19\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        loading: removePostLoading,\n        onClick: onRemovePost,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 19\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 19\n        }\n      }, \"\\uC2E0\\uACE0\"), \" \"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }))],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 26\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  })), commentFormOpened && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, __jsx(CommentForm, {\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }), __jsx(List, {\n    header: `${post.Comments.length}개의 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: item => __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Avatar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 27\n        }\n      }, item.User.nickname[0]),\n      content: item.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  })));\n};\n\n//initialState 모양대로 proptypes를 정해주면 된다. \nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"names":["React","useState","useCallback","PropTypes","useSelector","useDispatch","Card","Popover","Button","List","Comment","EllipsisOutlined","RetweetOutlined","HeartOutlined","MessageOutlined","Avatar","HeartTwoTone","PostImages","CommentForm","PostCardContent","REMOVE_POST_REQUEST","PostCard","post","liked","setLiked","commentFormOpened","setCommentFormOpened","onToggleLike","prev","onToggleComment","onRemovePost","dispatchEvent","type","data","id","state","user","Images","User","removePostLoading","nickname","content","Comments","length","item","propTypes","shape","number","object","string","createdAt","arrayOf","isRequired"],"sources":["/Users/jinkyungjung/Desktop/CODING/react-nodebird/prepare/front/components/PostCard.js"],"sourcesContent":["import React, {useState, useCallback} from 'react';\nimport PropTypes from 'prop-types';\nimport {useSelector, useDispatch} from 'react-redux';\nimport { Card, Popover, Button , List, Comment} from 'antd';\nimport { EllipsisOutlined, RetweetOutlined, HeartOutlined, MessageOutlined} from '@ant-design/icons';\nimport Avatar from 'antd/lib/avatar/avatar';\nimport { HeartTwoTone } from '@ant-design/icons';\n\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport { REMOVE_POST_REQUEST } from '../reducers/post';\n\n\nconst PostCard = ({ post }) => {\n  const [liked, setLiked] = useState(false);\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\n  \n  const onToggleLike = useCallback(() => {\n    setLiked((prev) => !prev);\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened((prev) => !prev);\n  }, []);\n\n  const onRemovePost = useCallback(() => {\n    dispatchEvent({\n      type: REMOVE_POST_REQUEST,\n      data: post.id,\n    })\n  })\n\n  const id = useSelector((state) => state.user?.id);\n\n  return (\n    <div>\n      <Card \n        cover= {post.Images[0] && <PostImages images = {post.Images} />}\n        actions = {[\n          <RetweetOutlined key = \"retweet\"/>,\n          liked\n            ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onToggleLike} />\n            : <HeartOutlined key = \"heart\" onClick={onToggleLike} />,\n          <MessageOutlined key = \"comment\" onClick={onToggleComment}/>,\n          <Popover key = \"more\" content={(\n            //내가 쓴글이면 수정, 삭제 가능하게 하고 남이 쓴글이면 신고가능하게 하기.\n            <Button.Group>\n              {id && post.User.id === id  \n              ? (\n                <>\n                  <Button>수정</Button>\n                  <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>삭제</Button>\n                </>\n                ) \n                : <Button>신고</Button> } {/* 왜 신고로 뜨지.. */}\n            </Button.Group>\n          )}>\n            <EllipsisOutlined />\n          </Popover> \n        ]}\n        >\n          <Card.Meta\n            avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n            title={post.User.nickname}\n            description={<PostCardContent postData= {post.content} />}\n          />\n      </Card>\n      {commentFormOpened && (\n        <div>\n          <CommentForm post = {post}/>\n          <List \n            header={`${post.Comments.length}개의 댓글`}\n            itemLayout=\"horizontal\"\n            dataSource={post.Comments}\n            renderItem={(item) => (\n              <li>\n                <Comment \n                  author={item.User.nickname}\n                  avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\n                  content={item.content}\n                />\n              </li>\n            )}\n          />\n        </div>\n      )}\n      {/* <CommentForm /> */}\n      {/* <Comments /> */}\n    </div>\n  )\n}\n\n//initialState 모양대로 proptypes를 정해주면 된다. \nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n  }).isRequired,\n}\nexport default PostCard"],"mappings":"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"},"metadata":{},"sourceType":"module"}