{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\n\n//대문자로 시작하는 애들은 서버에서 주는 데이터이다. \n//id가 다 붙어있어야 한다. \nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        nickname: 'nero'\n      },\n      content: '스페인 가고 싶다.'\n    }, {\n      id: shortId.generate(),\n      User: {\n        nickname: 'hero'\n      },\n      content: '나도 가고 싶다.'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\n\n//action\n//이렇게 변수로 빼주면 재활용할 수 있고 오타가 났을때 재활용 할 수 있다. \nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n//동적 action creator\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data //쓴 게시글을 받아서 보내준다. \n});\n\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data //쓴 글을 받아서 보내준다. \n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  Images: [],\n  Comments: []\n});\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  }\n});\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      //addPost\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null; //null 아니라 false 된다. \n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data)); //mainPost가 앞에 들어가야 한다. 그래야 새로운 글이 위에 올라간다. \n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      //remove post\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null; //null 아니라 false 된다. \n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data),\n        //조건에 맞는 게시글을 지워주고(filter) 나머지는 남는다. \n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      //addComment\n      //먼저 게시글의 id를 찾아서 게시글에 접근 -> 그 안에 Comments에 접근해서 정보를 넣어준다. \n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null; //null 아니라 false도 된다.   \n        break;\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n          /* 불변성의 유지하기 위한 코드이다. \n          원래 있던 comment들은 유지가 되고 새로운 comment가 추가 된다. \n          const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          const post = {...state.mainPosts[postIndex]};\n          post.Comments = [dummyComment(action.data.content), ...post.Comments]; //mainPost가 앞에 들어가야 한다. 그래야 새로운 글이 위에 올라간다. \n          const mainPosts = [...state.mainPosts];\n          mainPosts[postIndex] = post; */\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortId","produce","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","v","post","find","postId"],"sources":["/Users/jinkyungjung/Desktop/CODING/react-nodebird/prepare/front/reducers/post.js"],"sourcesContent":["import shortId from 'shortid';\nimport produce from 'immer';\n\n//대문자로 시작하는 애들은 서버에서 주는 데이터이다. \n//id가 다 붙어있어야 한다. \nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초',\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg',\n    }, {\n      id: shortId.generate(),\n      src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg',\n    }, {\n      id: shortId.generate(),\n      src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg',\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        nickname: 'nero',\n      },\n        content: '스페인 가고 싶다.',\n    }, {\n      id: shortId.generate(),\n      User: {\n        nickname: 'hero',\n      },\n      content: '나도 가고 싶다.'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n}\n\n//action\n //이렇게 변수로 빼주면 재활용할 수 있고 오타가 났을때 재활용 할 수 있다. \nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n//동적 action creator\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data, //쓴 게시글을 받아서 보내준다. \n});\n\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data, //쓴 글을 받아서 보내준다. \n});\n\nconst dummyPost = (data) => ({\n  id : data.id,\n  content: data.content,\n  User: {\n    id: 1, \n    nickname: '제로초',\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id : shortId.generate(),\n  content: data,\n  User: {\n    id: 1, \n    nickname: '제로초',\n  },\n})\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      //addPost\n      case ADD_POST_REQUEST :\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null; //null 아니라 false 된다. \n        break;\n      case ADD_POST_SUCCESS : \n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data)); //mainPost가 앞에 들어가야 한다. 그래야 새로운 글이 위에 올라간다. \n        break;\n      case ADD_POST_FAILURE : \n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      //remove post\n      case REMOVE_POST_REQUEST :\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null; //null 아니라 false 된다. \n        break;\n      case REMOVE_POST_SUCCESS : \n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data),//조건에 맞는 게시글을 지워주고(filter) 나머지는 남는다. \n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE : \n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      //addComment\n      //먼저 게시글의 id를 찾아서 게시글에 접근 -> 그 안에 Comments에 접근해서 정보를 넣어준다. \n      case ADD_COMMENT_REQUEST : \n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null; //null 아니라 false도 된다.   \n        break;\n      case ADD_COMMENT_SUCCESS : {\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n        /* 불변성의 유지하기 위한 코드이다. \n        원래 있던 comment들은 유지가 되고 새로운 comment가 추가 된다. \n        const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        const post = {...state.mainPosts[postIndex]};\n        post.Comments = [dummyComment(action.data.content), ...post.Comments]; //mainPost가 앞에 들어가야 한다. 그래야 새로운 글이 위에 올라간다. \n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = post; */\n      }\n      case ADD_COMMENT_FAILURE : \n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n}\n\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}