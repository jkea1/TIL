{"ast":null,"code":"var _jsxFileName = \"/Users/jinkyungjung/Desktop/CODING/react-nodebird/prepare/front/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport AppLayout from '../components/AppLayout';\nimport Head from 'next/head';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\n\n//<AppLayout>으로 감싸진 애들이 children이 된다. \n//의미있는 단위로 컴포넌트를 나눠주면 된다. \nconst Home = () => {\n  //main page 불러올때 LOAD_POSTS_REQUEST 가 호출된다. \n  //빈 배열만 넣는다면 componentdidmount 효과를 낼 수 있다. \n  //로딩을 초기에만 1번한다. \n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []);\n\n  //스크롤 내려서 끝까지 갔을때 다시 로딩하게 한다. \n  useEffect(() => {\n    window.addEventListener('scroll');\n  }, []);\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts\n  } = useSelector(state => state.post);\n  return __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, me && __jsx(PostForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 14\n    }\n  }), mainPosts.map(post => __jsx(PostCard, {\n    key: post.id,\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 32\n    }\n  })));\n};\nexport default Home;","map":{"version":3,"names":["React","useEffect","AppLayout","Head","useSelector","useDispatch","PostForm","PostCard","LOAD_POSTS_REQUEST","Home","dispatch","type","window","addEventListener","me","state","user","mainPosts","post","map","id"],"sources":["/Users/jinkyungjung/Desktop/CODING/react-nodebird/prepare/front/pages/index.js"],"sourcesContent":["import React, {useEffect} from 'react';\nimport AppLayout from '../components/AppLayout';\nimport Head from 'next/head';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\n\n\n//<AppLayout>으로 감싸진 애들이 children이 된다. \n//의미있는 단위로 컴포넌트를 나눠주면 된다. \nconst Home = () => {\n  \n  //main page 불러올때 LOAD_POSTS_REQUEST 가 호출된다. \n  //빈 배열만 넣는다면 componentdidmount 효과를 낼 수 있다. \n  //로딩을 초기에만 1번한다. \n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch({\n      type: LOAD_POSTS_REQUEST,\n    })\n  }, []);\n\n  //스크롤 내려서 끝까지 갔을때 다시 로딩하게 한다. \n  useEffect(() => {\n    window.addEventListener('scroll')\n  }, []);\n\n  const {me} = useSelector((state) => state.user);\n  const {mainPosts} = useSelector((state) => state.post);\n\n  return (\n    <AppLayout>\n      {me && <PostForm />}\n      {mainPosts.map((post) => <PostCard key={post.id} post={post}/>)}\n    </AppLayout>\n  );\n}\n\nexport default Home;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,QAAO,OAAO;AACtC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,IAAI,MAAM,WAAW;AAC5B,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,kBAAkB,QAAQ,kBAAkB;;AAGrD;AACA;AACA,MAAMC,IAAI,GAAG,MAAM;EAEjB;EACA;EACA;EACA,MAAMC,QAAQ,GAAGL,WAAW,EAAE;EAC9BJ,SAAS,CAAC,MAAM;IACdS,QAAQ,CAAC;MACPC,IAAI,EAAEH;IACR,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAP,SAAS,CAAC,MAAM;IACdW,MAAM,CAACC,gBAAgB,CAAC,QAAQ,CAAC;EACnC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM;IAACC;EAAE,CAAC,GAAGV,WAAW,CAAEW,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC;EAC/C,MAAM;IAACC;EAAS,CAAC,GAAGb,WAAW,CAAEW,KAAK,IAAKA,KAAK,CAACG,IAAI,CAAC;EAEtD,OACE,MAAC,SAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACPJ,EAAE,IAAI,MAAC,QAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,EAClBG,SAAS,CAACE,GAAG,CAAED,IAAI,IAAK,MAAC,QAAQ;IAAC,GAAG,EAAEA,IAAI,CAACE,EAAG;IAAC,IAAI,EAAEF,IAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAE,CAAC,CACrD;AAEhB,CAAC;AAED,eAAeT,IAAI"},"metadata":{},"sourceType":"module"}