{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nexport var initialState = {\n  logInLoading: false,\n  //로그인 시도중, true면 로딩창을 띄운다. \n  logInDone: false,\n  logInError: null,\n  //false로 해도 된다. \n  logOutLoading: false,\n  //로그아웃 시도중, true면 로딩창을 띄운다.\n  logOutDone: false,\n  logOutError: null,\n  signUpLoading: false,\n  //회원가입하기 시도중\n  signUpDone: false,\n  signUpError: null,\n  changeNicknameLoading: false,\n  //닉네임 변경 시도중\n  changeNicknameDone: false,\n  changeNicknameError: null,\n  me: null,\n  //me는 로그인한 사용자 정보이다. \n  signUpDate: {},\n  loginDate: {}\n};\n\n//오타에 취약한 애들은 변수로 만들자. \nexport var LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport var LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport var LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport var LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport var LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport var LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport var SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport var SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport var SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport var CHANGE_NICKNAME_REQUEST = 'CHANGE_NICKNAME_REQUEST';\nexport var CHANGE_NICKNAME_SUCCESS = 'CHANGE_NICKNAME_SUCCESS';\nexport var CHANGE_NICKNAME_FAILURE = 'CHANGE_NICKNAME_FAILURE';\nexport var FOLLOW_REQUEST = 'FOLLOW_REQUEST';\nexport var FOLLOW_SUCCESS = 'FOLLOW_SUCCESS';\nexport var FOLLOW_FAILURE = 'FOLLOW_FAILURE';\nexport var UNFOLLOW_REQUEST = 'UNFOLLOW_REQUEST';\nexport var UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS';\nexport var UNFOLLOW_FAILURE = 'UNFOLLOW_FAILURE';\nvar dummyUser = function dummyUser(data) {\n  return _objectSpread(_objectSpread({}, data), {}, {\n    nickname: '제로초',\n    id: 1,\n    //시퀄라이즈에서 합쳐주기 때문에 대문자이다. \n    Posts: [],\n    Followings: [],\n    Followers: []\n  });\n};\n\n//동적 action (=action creator)\n//SUCCESS와 FAILURE 는 saga가 put으로 호출해 준다. \nexport var loginRequestAction = function loginRequestAction(data) {\n  return {\n    type: 'LOG_IN_REQUEST',\n    data: data\n  };\n};\nexport var logoutRequestAction = function logoutRequestAction() {\n  return {\n    type: 'LOG_OUT_REQUEST'\n  };\n};\n\n//case 로그인 요청\n//data를 보여줄 것인가는 정책에 따라서 다르다. \n//1. 로딩창이 돌아가고 있을때 배경화면에 데이터를 유지해서 보여줄것인가 \n//2. 그 데이터마저 없애서 보여줄것인가 me : null 을 추가해준다.\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    //로그인\n    case 'LOG_IN_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logInLoading: true,\n        logInError: null,\n        //로딩할때는 error는 없애준다. \n        logInDone: false\n      });\n    case 'LOG_IN_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logInLoading: false,\n        logInDone: true,\n        me: dummyUser(action.data)\n      });\n    case 'LOG_IN_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logInLoading: false,\n        logInError: action.error\n      });\n    //로그아웃\n    case 'LOG_OUT_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logOutLoading: true,\n        logOutDone: false,\n        logOutError: null\n      });\n    case 'LOG_OUT_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logOutLoading: false,\n        logOutDone: true,\n        me: null\n      });\n    case 'LOG_OUT_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logOutLoading: false,\n        logOutError: action.error\n      });\n\n    //사인업\n    case 'SIGN_UP_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        signUpLoading: true,\n        signUpDone: false,\n        signUpError: null\n      });\n    case 'SIGN_UP_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        signUpLoading: false,\n        signUpDone: true\n      });\n    case 'SIGN_UP_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        signUpLoading: false,\n        signUpError: action.error\n      });\n\n    //닉네임 변경\n    case 'CHANGE_NICKNAME_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        changeNicknameLoading: true,\n        changeNicknameDone: false,\n        changeNicknameError: null\n      });\n    case 'CHANGE_NICKNAME_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        changeNicknameLoading: false,\n        changeNicknameDone: true\n      });\n    case 'CHANGE_NICKNAME_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        changeNicknameLoading: false,\n        changeNicknameError: action.error\n      });\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["initialState","logInLoading","logInDone","logInError","logOutLoading","logOutDone","logOutError","signUpLoading","signUpDone","signUpError","changeNicknameLoading","changeNicknameDone","changeNicknameError","me","signUpDate","loginDate","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","CHANGE_NICKNAME_REQUEST","CHANGE_NICKNAME_SUCCESS","CHANGE_NICKNAME_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","dummyUser","data","nickname","id","Posts","Followings","Followers","loginRequestAction","type","logoutRequestAction","reducer","state","action","error"],"sources":["/Users/jinkyungjung/Desktop/CODING/react-nodebird/prepare/front/reducers/user.js"],"sourcesContent":["export const initialState = {\n  logInLoading: false, //로그인 시도중, true면 로딩창을 띄운다. \n  logInDone: false,\n  logInError: null, //false로 해도 된다. \n  logOutLoading: false, //로그아웃 시도중, true면 로딩창을 띄운다.\n  logOutDone: false,\n  logOutError: null,\n  signUpLoading: false, //회원가입하기 시도중\n  signUpDone: false,\n  signUpError: null,\n  changeNicknameLoading: false, //닉네임 변경 시도중\n  changeNicknameDone: false, \n  changeNicknameError: null, \n  me: null, //me는 로그인한 사용자 정보이다. \n  signUpDate: {},\n  loginDate: {},\n}\n\n//오타에 취약한 애들은 변수로 만들자. \nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\n\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\n\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\n\nexport const CHANGE_NICKNAME_REQUEST = 'CHANGE_NICKNAME_REQUEST';\nexport const CHANGE_NICKNAME_SUCCESS = 'CHANGE_NICKNAME_SUCCESS';\nexport const CHANGE_NICKNAME_FAILURE = 'CHANGE_NICKNAME_FAILURE';\n\nexport const FOLLOW_REQUEST = 'FOLLOW_REQUEST';\nexport const FOLLOW_SUCCESS = 'FOLLOW_SUCCESS';\nexport const FOLLOW_FAILURE = 'FOLLOW_FAILURE';\n\nexport const UNFOLLOW_REQUEST = 'UNFOLLOW_REQUEST';\nexport const UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS';\nexport const UNFOLLOW_FAILURE = 'UNFOLLOW_FAILURE';\n\nconst dummyUser = (data) => ({\n  ...data,\n  nickname : '제로초',\n  id: 1, \n  //시퀄라이즈에서 합쳐주기 때문에 대문자이다. \n  Posts: [],\n  Followings: [],\n  Followers: [],\n})\n\n//동적 action (=action creator)\n//SUCCESS와 FAILURE 는 saga가 put으로 호출해 준다. \nexport const loginRequestAction = (data) => {\n  return {\n    type : 'LOG_IN_REQUEST',\n    data,\n  }\n};\n\nexport const logoutRequestAction = () => {\n  return {\n    type : 'LOG_OUT_REQUEST',\n  }\n};\n\n//case 로그인 요청\n//data를 보여줄 것인가는 정책에 따라서 다르다. \n//1. 로딩창이 돌아가고 있을때 배경화면에 데이터를 유지해서 보여줄것인가 \n//2. 그 데이터마저 없애서 보여줄것인가 me : null 을 추가해준다.\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    //로그인\n    case 'LOG_IN_REQUEST' : \n      return {\n        ...state,\n        logInLoading : true,\n        logInError: null, //로딩할때는 error는 없애준다. \n        logInDone: false,\n      };\n    case 'LOG_IN_SUCCESS' : \n      return {\n        ...state,\n        logInLoading: false,\n        logInDone : true,\n        me: dummyUser(action.data), \n      };\n    case 'LOG_IN_FAILURE' : \n      return {\n        ...state,\n        logInLoading : false,\n        logInError : action.error,\n      };\n    //로그아웃\n    case 'LOG_OUT_REQUEST' : \n      return {\n        ...state,\n        logOutLoading : true,\n        logOutDone: false, \n        logOutError: null,\n      };\n    case 'LOG_OUT_SUCCESS' : \n      return {\n        ...state,\n        logOutLoading : false,\n        logOutDone : true,\n        me: null,\n      };\n    case 'LOG_OUT_FAILURE' : \n      return {\n        ...state,\n        logOutLoading: false,\n        logOutError: action.error,\n      };\n\n      //사인업\n      case 'SIGN_UP_REQUEST' : \n      return {\n        ...state,\n        signUpLoading : true,\n        signUpDone: false, \n        signUpError: null,\n      };\n    case 'SIGN_UP_SUCCESS' : \n      return {\n        ...state,\n        signUpLoading : false,\n        signUpDone : true,\n      };\n    case 'SIGN_UP_FAILURE' : \n      return {\n        ...state,\n        signUpLoading: false,\n        signUpError: action.error,\n      };\n\n      //닉네임 변경\n      case 'CHANGE_NICKNAME_REQUEST' : \n      return {\n        ...state,\n        changeNicknameLoading : true,\n        changeNicknameDone: false, \n        changeNicknameError: null,\n      };\n    case 'CHANGE_NICKNAME_SUCCESS' : \n      return {\n        ...state,\n        changeNicknameLoading : false,\n        changeNicknameDone : true,\n      };\n    case 'CHANGE_NICKNAME_FAILURE' : \n      return {\n        ...state,\n        changeNicknameLoading: false,\n        changeNicknameError: action.error,\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}