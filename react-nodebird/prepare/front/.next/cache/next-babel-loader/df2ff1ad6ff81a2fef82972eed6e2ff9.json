{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { ThunkMiddleware } from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\n\n//rootreducer에서 받아온다. \nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\nvar loggerMiddleware = function loggerMiddleware(_ref) {\n  var dispatch = _ref.dispatch,\n    getState = _ref.getState;\n  return function (next) {\n    return function (action) {\n      console.log(action);\n      return next(action);\n    };\n  };\n};\nvar configureStore = function configureStore() {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware, loggerMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) //배포용\n  : composeWithDevTools(applyMiddleware.apply(void 0, middlewares)); //개발용\n  var store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"names":["createWrapper","createStore","applyMiddleware","compose","composeWithDevTools","ThunkMiddleware","createSagaMiddleware","reducer","rootSaga","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"sources":["/Users/jinkyungjung/Desktop/CODING/react-nodebird/prepare/front/store/configureStore.js"],"sourcesContent":["import {createWrapper} from 'next-redux-wrapper';\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { ThunkMiddleware } from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\n\n//rootreducer에서 받아온다. \nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst loggerMiddleware = ({dispatch, getState}) => (next) => (action) => {\n  console.log(action);\n  return next(action);\n};\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, loggerMiddleware];\n  const enhancer = process.env.NODE_ENV === 'production'\n  ? compose(applyMiddleware(...middlewares)) //배포용\n  : composeWithDevTools(applyMiddleware(...middlewares)) //개발용\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}\n\nconst wrapper = createWrapper(configureStore, {debug: process.env.NODE_ENV === 'development',} );\n\nexport default wrapper;"],"mappings":"AAAA,SAAQA,aAAa,QAAO,oBAAoB;AAChD,SAAQC,WAAW,EAAEC,eAAe,EAAEC,OAAO,QAAO,OAAO;AAC3D,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,eAAe,QAAQ,aAAa;AAC7C,OAAOC,oBAAoB,MAAM,YAAY;;AAE7C;AACA,OAAOC,OAAO,MAAM,aAAa;AACjC,OAAOC,QAAQ,MAAM,UAAU;AAE/B,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB;EAAA,IAAKC,QAAQ,QAARA,QAAQ;IAAEC,QAAQ,QAARA,QAAQ;EAAA,OAAM,UAACC,IAAI;IAAA,OAAK,UAACC,MAAM,EAAK;MACvEC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;MACnB,OAAOD,IAAI,CAACC,MAAM,CAAC;IACrB,CAAC;EAAA;AAAA;AAED,IAAMG,cAAc,GAAG,SAAjBA,cAAc,GAAS;EAC3B,IAAMC,cAAc,GAAGX,oBAAoB,EAAE;EAC7C,IAAMY,WAAW,GAAG,CAACD,cAAc,EAAER,gBAAgB,CAAC;EACtD,IAAMU,QAAQ,GAAG,QACfhB,OAAO,CAACD,eAAe,eAAIgB,WAAW,CAAC,CAAC,CAAC;EAAA,EACzCd,mBAAmB,CAACF,eAAe,eAAIgB,WAAW,CAAC,CAAC,EAAC;EACvD,IAAME,KAAK,GAAGnB,WAAW,CAACM,OAAO,EAAEY,QAAQ,CAAC;EAC5CC,KAAK,CAACC,QAAQ,GAAGJ,cAAc,CAACK,GAAG,CAACd,QAAQ,CAAC;EAC7C,OAAOY,KAAK;AACd,CAAC;AAED,IAAMG,OAAO,GAAGvB,aAAa,CAACgB,cAAc,EAAE;EAACQ,KAAK;AAAyC,CAAC,CAAE;AAEhG,eAAeD,OAAO"},"metadata":{},"sourceType":"module"}