{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\n\n//대문자로 시작하는 애들은 서버에서 주는 데이터이다. \n//id가 다 붙어있어야 한다. \nexport const initialState = {\n  mainPosts: [],\n  //서버에서 data 받아온다. \n  imagePaths: [],\n  hasMorePosts: true,\n  //처음에는 true로 둬서 처음 데이터는 무조건 겨져오게 한다. false면 dummyposts를 가져오려는 시도를 막는다. \n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\n\n//서버에서 정보를 불러오는 것을 아래로 대체 한다. \n//말 그대로 dummydata를 만들어 주는 함수이다. \nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\n\n/* initialState.mainPosts = initialState.mainPosts.concat(); */\n\n//action\n//이렇게 변수로 빼주면 재활용할 수 있고 오타가 났을때 재활용 할 수 있다. \nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n//동적 action creator\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data //쓴 게시글을 받아서 보내준다. \n});\n\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data //쓴 글을 받아서 보내준다. \n});\n\n/* const dummyPost = (data) => ({\n  id : data.id,\n  content: data.content,\n  User: {\n    id: 1, \n    nickname: '제로초',\n  },\n  Images: [],\n  Comments: [],\n}); */\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  }\n});\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      //loadPost\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null; //null 아니라 false 된다. \n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data); //여기 주의하자!\n        draft.hasMorePosts = draft.mainPosts.length < 50; //이렇게 숫자를 제한 할 수 있네, 결과값으로 true 혹은 false가 들어간다. \n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      //addPost\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null; //null 아니라 false 된다. \n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data); //mainPost가 앞에 들어가야 한다. 그래야 새로운 글이 위에 올라간다. \n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      //remove post\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null; //null 아니라 false 된다. \n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data),\n        //조건에 맞는 게시글을 지워주고(filter) 나머지는 남는다. \n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      //addComment\n      //먼저 게시글의 id를 찾아서 게시글에 접근 -> 그 안에 Comments에 접근해서 정보를 넣어준다. \n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null; //null 아니라 false도 된다.   \n        break;\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n          /* 불변성의 유지하기 위한 코드이다. \n          원래 있던 comment들은 유지가 되고 새로운 comment가 추가 된다. \n          const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          const post = {...state.mainPosts[postIndex]};\n          post.Comments = [dummyComment(action.data.content), ...post.Comments]; //mainPost가 앞에 들어가야 한다. 그래야 새로운 글이 위에 올라간다. \n          const mainPosts = [...state.mainPosts];\n          mainPosts[postIndex] = post; */\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;\n\n//faker 없을때 만들었던 dummydata\n/* {\n  id: 1,\n  User: {\n    id: 1,\n    nickname: '제로초',\n  },\n  content: '첫 번째 게시글 #해시태그 #익스프레스',\n  Images: [{\n    id: shortId.generate(),\n    src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg',\n  }, {\n    id: shortId.generate(),\n    src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg',\n  }, {\n    id: shortId.generate(),\n    src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg',\n  }],\n  Comments: [{\n    id: shortId.generate(),\n    User: {\n      nickname: 'nero',\n    },\n      content: '스페인 가고 싶다.',\n  }, {\n    id: shortId.generate(),\n    User: {\n      nickname: 'hero',\n    },\n    content: '나도 가고 싶다.'\n  }]\n} */","map":{"version":3,"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyComment","reducer","state","action","draft","concat","length","error","unshift","filter","v","post","find","postId"],"sources":["/Users/jinkyungjung/Documents/programming/TIL/react-nodebird/prepare/front/reducers/post.js"],"sourcesContent":["import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\n\n//대문자로 시작하는 애들은 서버에서 주는 데이터이다. \n//id가 다 붙어있어야 한다. \nexport const initialState = {\n  mainPosts: [], //서버에서 data 받아온다. \n  imagePaths: [],\n  hasMorePosts: true, //처음에는 true로 둬서 처음 데이터는 무조건 겨져오게 한다. false면 dummyposts를 가져오려는 시도를 막는다. \n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n};\n\n\n//서버에서 정보를 불러오는 것을 아래로 대체 한다. \n//말 그대로 dummydata를 만들어 주는 함수이다. \nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image(),\n  }],\n  Comments: [{\n    User: {\n      id : shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence(),\n  }],\n}));\n\n/* initialState.mainPosts = initialState.mainPosts.concat(); */\n\n//action\n//이렇게 변수로 빼주면 재활용할 수 있고 오타가 났을때 재활용 할 수 있다. \nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n//동적 action creator\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data, //쓴 게시글을 받아서 보내준다. \n});\n\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data, //쓴 글을 받아서 보내준다. \n});\n\n/* const dummyPost = (data) => ({\n  id : data.id,\n  content: data.content,\n  User: {\n    id: 1, \n    nickname: '제로초',\n  },\n  Images: [],\n  Comments: [],\n}); */\n\nconst dummyComment = (data) => ({\n  id : shortId.generate(),\n  content: data,\n  User: {\n    id: 1, \n    nickname: '제로초',\n  },\n})\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      \n      //loadPost\n      case LOAD_POSTS_REQUEST :\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null; //null 아니라 false 된다. \n        break;\n      case LOAD_POSTS_SUCCESS : \n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data); //여기 주의하자!\n        draft.hasMorePosts = draft.mainPosts.length < 50; //이렇게 숫자를 제한 할 수 있네, 결과값으로 true 혹은 false가 들어간다. \n        break;\n      case LOAD_POSTS_FAILURE : \n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      \n      //addPost\n      case ADD_POST_REQUEST :\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null; //null 아니라 false 된다. \n        break;\n      case ADD_POST_SUCCESS : \n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data); //mainPost가 앞에 들어가야 한다. 그래야 새로운 글이 위에 올라간다. \n        break;\n      case ADD_POST_FAILURE : \n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      //remove post\n      case REMOVE_POST_REQUEST :\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null; //null 아니라 false 된다. \n        break;\n      case REMOVE_POST_SUCCESS : \n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data),//조건에 맞는 게시글을 지워주고(filter) 나머지는 남는다. \n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE : \n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      //addComment\n      //먼저 게시글의 id를 찾아서 게시글에 접근 -> 그 안에 Comments에 접근해서 정보를 넣어준다. \n      case ADD_COMMENT_REQUEST : \n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null; //null 아니라 false도 된다.   \n        break;\n      case ADD_COMMENT_SUCCESS : {\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n        /* 불변성의 유지하기 위한 코드이다. \n        원래 있던 comment들은 유지가 되고 새로운 comment가 추가 된다. \n        const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        const post = {...state.mainPosts[postIndex]};\n        post.Comments = [dummyComment(action.data.content), ...post.Comments]; //mainPost가 앞에 들어가야 한다. 그래야 새로운 글이 위에 올라간다. \n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = post; */\n      }\n      case ADD_COMMENT_FAILURE : \n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n}\n\nexport default reducer;\n\n//faker 없을때 만들었던 dummydata\n/* {\n  id: 1,\n  User: {\n    id: 1,\n    nickname: '제로초',\n  },\n  content: '첫 번째 게시글 #해시태그 #익스프레스',\n  Images: [{\n    id: shortId.generate(),\n    src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg',\n  }, {\n    id: shortId.generate(),\n    src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg',\n  }, {\n    id: shortId.generate(),\n    src: 'https://www.theglobetrottingteacher.com/wp-content/uploads/2019/09/Cordoba-Spain-Roman-Bridge.jpg',\n  }],\n  Comments: [{\n    id: shortId.generate(),\n    User: {\n      nickname: 'nero',\n    },\n      content: '스페인 가고 싶다.',\n  }, {\n    id: shortId.generate(),\n    User: {\n      nickname: 'hero',\n    },\n    content: '나도 가고 싶다.'\n  }]\n} */"],"mappings":"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"},"metadata":{},"sourceType":"module"}