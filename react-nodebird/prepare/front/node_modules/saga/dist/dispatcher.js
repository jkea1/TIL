"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DispatcherClass = /** @class */ (function () {
    function DispatcherClass() {
        this.stores = {};
        this._isDispatching = false;
    }
    DispatcherClass.prototype.register = function (name, callback) {
        this.stores[name] = {
            callback: callback,
            isHandled: false,
            isPending: false
        };
    };
    DispatcherClass.prototype.unregister = function (name) {
        this.stores[name] = undefined;
    };
    DispatcherClass.prototype.waitFor = function (names) {
        if (!this.isDispatching) {
            throw new Error("Dispatcher.waitFor(...): Must be invoked while dispatching.");
        }
        for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
            var name_1 = names_1[_i];
            var store = this.stores[name_1];
            if (store == null) {
                throw new Error("Dispatcher.waitFor(...): Store \"" + name_1 + "\" must be initialized first.");
            }
            if (store.isPending) {
                throw new Error("Dispatcher.waitFor(...): Circular dependency detected while waiting for " + name_1 + ".");
            }
            this.invokeCallback(store);
        }
    };
    DispatcherClass.prototype.dispatch = function (payload) {
        if (this._isDispatching) {
            throw new Error("Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.");
        }
        this.startDispatching(payload);
        try {
            for (var _i = 0, _a = Object.keys(this.stores); _i < _a.length; _i++) {
                var name_2 = _a[_i];
                var store = this.stores[name_2];
                if (store == null || store.isPending) {
                    continue;
                }
                this.invokeCallback(store);
            }
        }
        finally {
            this.stopDispatching();
        }
    };
    Object.defineProperty(DispatcherClass.prototype, "isDispatching", {
        get: function () {
            return this._isDispatching;
        },
        enumerable: true,
        configurable: true
    });
    DispatcherClass.prototype.invokeCallback = function (store) {
        if (this.pendingPayload == null) {
            return;
        }
        store.isPending = true;
        store.callback(this.pendingPayload);
        store.isHandled = true;
    };
    DispatcherClass.prototype.startDispatching = function (payload) {
        for (var _i = 0, _a = Object.keys(this.stores); _i < _a.length; _i++) {
            var name_3 = _a[_i];
            var store = this.stores[name_3];
            if (store == null) {
                continue;
            }
            store.isPending = false;
            store.isHandled = false;
        }
        this.pendingPayload = payload;
        this._isDispatching = true;
    };
    DispatcherClass.prototype.stopDispatching = function () {
        this.pendingPayload = undefined;
        this._isDispatching = false;
    };
    return DispatcherClass;
}());
function createDispatcher() {
    return new DispatcherClass();
}
exports.createDispatcher = createDispatcher;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcGF0Y2hlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kaXNwYXRjaGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBZ0JBO0lBQUE7UUFDWSxXQUFNLEdBQXdELEVBQUUsQ0FBQztRQUNqRSxtQkFBYyxHQUFZLEtBQUssQ0FBQztJQXNGNUMsQ0FBQztJQW5GVSxrQ0FBUSxHQUFmLFVBQWdCLElBQVksRUFBRSxRQUFxQztRQUMvRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHO1lBQ2hCLFFBQVEsRUFBRSxRQUFRO1lBQ2xCLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLFNBQVMsRUFBRSxLQUFLO1NBQ25CLENBQUM7SUFDTixDQUFDO0lBRU0sb0NBQVUsR0FBakIsVUFBa0IsSUFBWTtRQUMxQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQztJQUNsQyxDQUFDO0lBRU0saUNBQU8sR0FBZCxVQUFlLEtBQWU7UUFDMUIsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQyw2REFBNkQsQ0FBQyxDQUFDO1NBQ2xGO1FBRUQsS0FBbUIsVUFBSyxFQUFMLGVBQUssRUFBTCxtQkFBSyxFQUFMLElBQUssRUFBRTtZQUFyQixJQUFNLE1BQUksY0FBQTtZQUNYLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBSSxDQUFDLENBQUM7WUFDaEMsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFO2dCQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQW1DLE1BQUksa0NBQThCLENBQUMsQ0FBQzthQUMxRjtZQUVELElBQUksS0FBSyxDQUFDLFNBQVMsRUFBRTtnQkFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQyw2RUFBMkUsTUFBSSxNQUFHLENBQUMsQ0FBQzthQUN2RztZQUVELElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDOUI7SUFDTCxDQUFDO0lBRU0sa0NBQVEsR0FBZixVQUFnQixPQUFpQjtRQUM3QixJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQyxzRUFBc0UsQ0FBQyxDQUFDO1NBQzNGO1FBRUQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9CLElBQUk7WUFDQSxLQUFtQixVQUF3QixFQUF4QixLQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUF4QixjQUF3QixFQUF4QixJQUF3QixFQUFFO2dCQUF4QyxJQUFNLE1BQUksU0FBQTtnQkFDWCxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQUksQ0FBQyxDQUFDO2dCQUNoQyxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLFNBQVMsRUFBRTtvQkFDbEMsU0FBUztpQkFDWjtnQkFFRCxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzlCO1NBQ0o7Z0JBQVM7WUFDTixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDMUI7SUFDTCxDQUFDO0lBRUQsc0JBQVcsMENBQWE7YUFBeEI7WUFDSSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7UUFDL0IsQ0FBQzs7O09BQUE7SUFFTyx3Q0FBYyxHQUF0QixVQUF1QixLQUEwQjtRQUM3QyxJQUFJLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxFQUFFO1lBQzdCLE9BQU87U0FDVjtRQUVELEtBQUssQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3BDLEtBQUssQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFFTywwQ0FBZ0IsR0FBeEIsVUFBeUIsT0FBaUI7UUFDdEMsS0FBbUIsVUFBd0IsRUFBeEIsS0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBeEIsY0FBd0IsRUFBeEIsSUFBd0IsRUFBRTtZQUF4QyxJQUFNLE1BQUksU0FBQTtZQUNYLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBSSxDQUFDLENBQUM7WUFDaEMsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFO2dCQUNmLFNBQVM7YUFDWjtZQUVELEtBQUssQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQ3hCLEtBQUssQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1NBQzNCO1FBQ0QsSUFBSSxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUM7UUFDOUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7SUFDL0IsQ0FBQztJQUVPLHlDQUFlLEdBQXZCO1FBQ0ksSUFBSSxDQUFDLGNBQWMsR0FBRyxTQUFTLENBQUM7UUFDaEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7SUFDaEMsQ0FBQztJQUNMLHNCQUFDO0FBQUQsQ0FBQyxBQXhGRCxJQXdGQztBQUVELFNBQWdCLGdCQUFnQjtJQUM1QixPQUFPLElBQUksZUFBZSxFQUFZLENBQUM7QUFDM0MsQ0FBQztBQUZELDRDQUVDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgRGlzcGF0Y2hlclJlZ2lzdGVySGFuZGxlcjxUUGF5bG9hZD4gPSAocGF5bG9hZDogVFBheWxvYWQpID0+IHZvaWQ7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERpc3BhdGNoZXI8VFBheWxvYWQ+IHtcclxuICAgIHJlZ2lzdGVyKG5hbWU6IHN0cmluZywgY2FsbGJhY2s6IERpc3BhdGNoZXJSZWdpc3RlckhhbmRsZXI8VFBheWxvYWQ+KTogdm9pZDtcclxuICAgIHVucmVnaXN0ZXIobmFtZTogc3RyaW5nKTogdm9pZDtcclxuICAgIHdhaXRGb3IobmFtZXM6IHN0cmluZ1tdKTogdm9pZDtcclxuICAgIGRpc3BhdGNoPFREUGF5bG9hZCBleHRlbmRzIFRQYXlsb2FkPihwYXlsb2FkOiBURFBheWxvYWQpOiB2b2lkO1xyXG4gICAgaXNEaXNwYXRjaGluZzogYm9vbGVhbjtcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0b3JlSXRlbTxUUGF5bG9hZD4ge1xyXG4gICAgY2FsbGJhY2s6IChwYXlsb2FkOiBUUGF5bG9hZCkgPT4gdm9pZDtcclxuICAgIGlzSGFuZGxlZDogYm9vbGVhbjtcclxuICAgIGlzUGVuZGluZzogYm9vbGVhbjtcclxufVxyXG5cclxuY2xhc3MgRGlzcGF0Y2hlckNsYXNzPFRQYXlsb2FkPiBpbXBsZW1lbnRzIERpc3BhdGNoZXI8VFBheWxvYWQ+IHtcclxuICAgIHByaXZhdGUgc3RvcmVzOiB7IFtuYW1lOiBzdHJpbmddOiBTdG9yZUl0ZW08VFBheWxvYWQ+IHwgdW5kZWZpbmVkIH0gPSB7fTtcclxuICAgIHByaXZhdGUgX2lzRGlzcGF0Y2hpbmc6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHByaXZhdGUgcGVuZGluZ1BheWxvYWQ/OiBUUGF5bG9hZDtcclxuXHJcbiAgICBwdWJsaWMgcmVnaXN0ZXIobmFtZTogc3RyaW5nLCBjYWxsYmFjazogKHBheWxvYWQ6IFRQYXlsb2FkKSA9PiB2b2lkKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zdG9yZXNbbmFtZV0gPSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcclxuICAgICAgICAgICAgaXNIYW5kbGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgaXNQZW5kaW5nOiBmYWxzZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVucmVnaXN0ZXIobmFtZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zdG9yZXNbbmFtZV0gPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHdhaXRGb3IobmFtZXM6IHN0cmluZ1tdKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzRGlzcGF0Y2hpbmcpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGlzcGF0Y2hlci53YWl0Rm9yKC4uLik6IE11c3QgYmUgaW52b2tlZCB3aGlsZSBkaXNwYXRjaGluZy5cIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgbmFtZXMpIHtcclxuICAgICAgICAgICAgY29uc3Qgc3RvcmUgPSB0aGlzLnN0b3Jlc1tuYW1lXTtcclxuICAgICAgICAgICAgaWYgKHN0b3JlID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRGlzcGF0Y2hlci53YWl0Rm9yKC4uLik6IFN0b3JlIFwiJHtuYW1lfVwiIG11c3QgYmUgaW5pdGlhbGl6ZWQgZmlyc3QuYCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChzdG9yZS5pc1BlbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRGlzcGF0Y2hlci53YWl0Rm9yKC4uLik6IENpcmN1bGFyIGRlcGVuZGVuY3kgZGV0ZWN0ZWQgd2hpbGUgd2FpdGluZyBmb3IgJHtuYW1lfS5gKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5pbnZva2VDYWxsYmFjayhzdG9yZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkaXNwYXRjaChwYXlsb2FkOiBUUGF5bG9hZCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc0Rpc3BhdGNoaW5nKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRpc3BhdGNoLmRpc3BhdGNoKC4uLik6IENhbm5vdCBkaXNwYXRjaCBpbiB0aGUgbWlkZGxlIG9mIGEgZGlzcGF0Y2guXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zdGFydERpc3BhdGNoaW5nKHBheWxvYWQpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBPYmplY3Qua2V5cyh0aGlzLnN0b3JlcykpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0b3JlID0gdGhpcy5zdG9yZXNbbmFtZV07XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RvcmUgPT0gbnVsbCB8fCBzdG9yZS5pc1BlbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmludm9rZUNhbGxiYWNrKHN0b3JlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcERpc3BhdGNoaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgaXNEaXNwYXRjaGluZygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faXNEaXNwYXRjaGluZztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGludm9rZUNhbGxiYWNrKHN0b3JlOiBTdG9yZUl0ZW08VFBheWxvYWQ+KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMucGVuZGluZ1BheWxvYWQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdG9yZS5pc1BlbmRpbmcgPSB0cnVlO1xyXG4gICAgICAgIHN0b3JlLmNhbGxiYWNrKHRoaXMucGVuZGluZ1BheWxvYWQpO1xyXG4gICAgICAgIHN0b3JlLmlzSGFuZGxlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdGFydERpc3BhdGNoaW5nKHBheWxvYWQ6IFRQYXlsb2FkKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIE9iamVjdC5rZXlzKHRoaXMuc3RvcmVzKSkge1xyXG4gICAgICAgICAgICBjb25zdCBzdG9yZSA9IHRoaXMuc3RvcmVzW25hbWVdO1xyXG4gICAgICAgICAgICBpZiAoc3RvcmUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0b3JlLmlzUGVuZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzdG9yZS5pc0hhbmRsZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wZW5kaW5nUGF5bG9hZCA9IHBheWxvYWQ7XHJcbiAgICAgICAgdGhpcy5faXNEaXNwYXRjaGluZyA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdG9wRGlzcGF0Y2hpbmcoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5wZW5kaW5nUGF5bG9hZCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLl9pc0Rpc3BhdGNoaW5nID0gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaXNwYXRjaGVyPFRQYXlsb2FkPigpOiBEaXNwYXRjaGVyPFRQYXlsb2FkPiB7XHJcbiAgICByZXR1cm4gbmV3IERpc3BhdGNoZXJDbGFzczxUUGF5bG9hZD4oKTtcclxufVxyXG4iXX0=