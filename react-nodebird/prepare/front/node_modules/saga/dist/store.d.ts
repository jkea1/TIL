import { Dispatcher } from "./dispatcher";
export declare type StoreReduceHandler<TState, TPayload> = (state: TState, payload: TPayload) => TState;
export declare type StoreAreEqualHandler<TState> = (state: TState, nextState: TState) => boolean;
export interface Store<TState, TPayload> {
    getState(): TState;
    getDispatcher(): Dispatcher<TPayload>;
    getName(): string;
    hasChanged(): boolean;
    subscribe(callback: () => void): () => void;
    unsubscribe(callback: () => void): void;
    getSubscribersCount(): number;
}
export interface StoreOptions<TState, TPayload> {
    name: string;
    initialState: TState;
    dispatcher: Dispatcher<TPayload>;
    reducer: StoreReduceHandler<TState, TPayload>;
    areEqual?: StoreAreEqualHandler<TState>;
}
export declare function createStore<TState, TPayload>(options: StoreOptions<TState, TPayload>): Store<TState, TPayload>;
