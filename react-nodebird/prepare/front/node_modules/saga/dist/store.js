"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var emitter_1 = require("./emitter");
var StoreClass = /** @class */ (function () {
    function StoreClass(name, initialState, dispatcher, reducer, areEqual) {
        var _this = this;
        this.name = name;
        this.initialState = initialState;
        this.dispatcher = dispatcher;
        this.reducer = reducer;
        this.areEqual = areEqual;
        this.state = tslib_1.__assign({}, this.initialState);
        this.hasStoreChanged = false;
        this.emitter = new emitter_1.TinyEmitter();
        this.onDispatch = function (payload) {
            _this.hasStoreChanged = false;
            var currentState = _this.state;
            var nextState = _this.reducer(currentState, payload);
            if (!_this.areEqual(currentState, nextState)) {
                _this.state = nextState;
                _this.hasStoreChanged = true;
                _this.emitter.emit();
            }
        };
        this.dispatcher.register(this.name, this.onDispatch);
    }
    StoreClass.prototype.getName = function () {
        return this.name;
    };
    StoreClass.prototype.getState = function () {
        return this.state;
    };
    StoreClass.prototype.getDispatcher = function () {
        return this.dispatcher;
    };
    StoreClass.prototype.hasChanged = function () {
        return this.hasStoreChanged;
    };
    StoreClass.prototype.subscribe = function (callback) {
        return this.emitter.addListener(callback);
    };
    StoreClass.prototype.unsubscribe = function (callback) {
        this.emitter.removeListener(callback);
    };
    StoreClass.prototype.getSubscribersCount = function () {
        return this.emitter.getCount();
    };
    return StoreClass;
}());
function createStore(options) {
    var areEqual = options.areEqual != null ? options.areEqual : function (state, nextState) { return state === nextState; };
    return new StoreClass(options.name, options.initialState, options.dispatcher, options.reducer, areEqual);
}
exports.createStore = createStore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3RvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EscUNBQWtEO0FBRWxEO0lBQ0ksb0JBQ3FCLElBQVksRUFDWixZQUFvQixFQUM3QixVQUFnQyxFQUM5QixPQUE2QyxFQUM3QyxRQUFzQztRQUxwRCxpQkFRQztRQVBvQixTQUFJLEdBQUosSUFBSSxDQUFRO1FBQ1osaUJBQVksR0FBWixZQUFZLENBQVE7UUFDN0IsZUFBVSxHQUFWLFVBQVUsQ0FBc0I7UUFDOUIsWUFBTyxHQUFQLE9BQU8sQ0FBc0M7UUFDN0MsYUFBUSxHQUFSLFFBQVEsQ0FBOEI7UUFLMUMsVUFBSyx3QkFBZ0IsSUFBSSxDQUFDLFlBQVksRUFBRztRQUMzQyxvQkFBZSxHQUFZLEtBQUssQ0FBQztRQUNqQyxZQUFPLEdBQTBCLElBQUkscUJBQVcsRUFBRSxDQUFDO1FBOEJuRCxlQUFVLEdBQXdDLFVBQUEsT0FBTztZQUM3RCxLQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztZQUU3QixJQUFNLFlBQVksR0FBRyxLQUFJLENBQUMsS0FBSyxDQUFDO1lBQ2hDLElBQU0sU0FBUyxHQUFHLEtBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBRXRELElBQUksQ0FBQyxLQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxTQUFTLENBQUMsRUFBRTtnQkFDekMsS0FBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUM7Z0JBRXZCLEtBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO2dCQUM1QixLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ3ZCO1FBQ0wsQ0FBQyxDQUFDO1FBL0NFLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFNTSw0QkFBTyxHQUFkO1FBQ0ksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFFTSw2QkFBUSxHQUFmO1FBQ0ksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFTSxrQ0FBYSxHQUFwQjtRQUNJLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUMzQixDQUFDO0lBRU0sK0JBQVUsR0FBakI7UUFDSSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDaEMsQ0FBQztJQUVNLDhCQUFTLEdBQWhCLFVBQWlCLFFBQW9CO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVNLGdDQUFXLEdBQWxCLFVBQW1CLFFBQW9CO1FBQ25DLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFTSx3Q0FBbUIsR0FBMUI7UUFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbkMsQ0FBQztJQWVMLGlCQUFDO0FBQUQsQ0FBQyxBQXhERCxJQXdEQztBQXVCRCxTQUFnQixXQUFXLENBQW1CLE9BQXVDO0lBQ2pGLElBQU0sUUFBUSxHQUFpQyxPQUFPLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsVUFBQyxLQUFLLEVBQUUsU0FBUyxJQUFLLE9BQUEsS0FBSyxLQUFLLFNBQVMsRUFBbkIsQ0FBbUIsQ0FBQztJQUV2SSxPQUFPLElBQUksVUFBVSxDQUFtQixPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQy9ILENBQUM7QUFKRCxrQ0FJQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpc3BhdGNoZXIsIERpc3BhdGNoZXJSZWdpc3RlckhhbmRsZXIgfSBmcm9tIFwiLi9kaXNwYXRjaGVyXCI7XHJcbmltcG9ydCB7IFRpbnlFbWl0dGVyLCBDYWxsYmFjayB9IGZyb20gXCIuL2VtaXR0ZXJcIjtcclxuXHJcbmNsYXNzIFN0b3JlQ2xhc3M8VFN0YXRlLCBUUGF5bG9hZD4gaW1wbGVtZW50cyBTdG9yZTxUU3RhdGUsIFRQYXlsb2FkPiB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IG5hbWU6IHN0cmluZyxcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGluaXRpYWxTdGF0ZTogVFN0YXRlLFxyXG4gICAgICAgIHByaXZhdGUgZGlzcGF0Y2hlcjogRGlzcGF0Y2hlcjxUUGF5bG9hZD4sXHJcbiAgICAgICAgcHJvdGVjdGVkIHJlZHVjZXI6IFN0b3JlUmVkdWNlSGFuZGxlcjxUU3RhdGUsIFRQYXlsb2FkPixcclxuICAgICAgICBwcm90ZWN0ZWQgYXJlRXF1YWw6IFN0b3JlQXJlRXF1YWxIYW5kbGVyPFRTdGF0ZT5cclxuICAgICkge1xyXG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlci5yZWdpc3Rlcih0aGlzLm5hbWUsIHRoaXMub25EaXNwYXRjaCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHN0YXRlOiBUU3RhdGUgPSB7IC4uLnRoaXMuaW5pdGlhbFN0YXRlIH07XHJcbiAgICBwcml2YXRlIGhhc1N0b3JlQ2hhbmdlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBlbWl0dGVyOiBUaW55RW1pdHRlcjxDYWxsYmFjaz4gPSBuZXcgVGlueUVtaXR0ZXIoKTtcclxuXHJcbiAgICBwdWJsaWMgZ2V0TmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFN0YXRlKCk6IFRTdGF0ZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldERpc3BhdGNoZXIoKTogRGlzcGF0Y2hlcjxUUGF5bG9hZD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRpc3BhdGNoZXI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGhhc0NoYW5nZWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzU3RvcmVDaGFuZ2VkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdWJzY3JpYmUoY2FsbGJhY2s6ICgpID0+IHZvaWQpOiAoKSA9PiB2b2lkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lbWl0dGVyLmFkZExpc3RlbmVyKGNhbGxiYWNrKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdW5zdWJzY3JpYmUoY2FsbGJhY2s6ICgpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoY2FsbGJhY2spO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRTdWJzY3JpYmVyc0NvdW50KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZW1pdHRlci5nZXRDb3VudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25EaXNwYXRjaDogRGlzcGF0Y2hlclJlZ2lzdGVySGFuZGxlcjxUUGF5bG9hZD4gPSBwYXlsb2FkID0+IHtcclxuICAgICAgICB0aGlzLmhhc1N0b3JlQ2hhbmdlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBjb25zdCBjdXJyZW50U3RhdGUgPSB0aGlzLnN0YXRlO1xyXG4gICAgICAgIGNvbnN0IG5leHRTdGF0ZSA9IHRoaXMucmVkdWNlcihjdXJyZW50U3RhdGUsIHBheWxvYWQpO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuYXJlRXF1YWwoY3VycmVudFN0YXRlLCBuZXh0U3RhdGUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBuZXh0U3RhdGU7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmhhc1N0b3JlQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgU3RvcmVSZWR1Y2VIYW5kbGVyPFRTdGF0ZSwgVFBheWxvYWQ+ID0gKHN0YXRlOiBUU3RhdGUsIHBheWxvYWQ6IFRQYXlsb2FkKSA9PiBUU3RhdGU7XHJcbmV4cG9ydCB0eXBlIFN0b3JlQXJlRXF1YWxIYW5kbGVyPFRTdGF0ZT4gPSAoc3RhdGU6IFRTdGF0ZSwgbmV4dFN0YXRlOiBUU3RhdGUpID0+IGJvb2xlYW47XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFN0b3JlPFRTdGF0ZSwgVFBheWxvYWQ+IHtcclxuICAgIGdldFN0YXRlKCk6IFRTdGF0ZTtcclxuICAgIGdldERpc3BhdGNoZXIoKTogRGlzcGF0Y2hlcjxUUGF5bG9hZD47XHJcbiAgICBnZXROYW1lKCk6IHN0cmluZztcclxuICAgIGhhc0NoYW5nZWQoKTogYm9vbGVhbjtcclxuICAgIHN1YnNjcmliZShjYWxsYmFjazogKCkgPT4gdm9pZCk6ICgpID0+IHZvaWQ7XHJcbiAgICB1bnN1YnNjcmliZShjYWxsYmFjazogKCkgPT4gdm9pZCk6IHZvaWQ7XHJcbiAgICBnZXRTdWJzY3JpYmVyc0NvdW50KCk6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTdG9yZU9wdGlvbnM8VFN0YXRlLCBUUGF5bG9hZD4ge1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgaW5pdGlhbFN0YXRlOiBUU3RhdGU7XHJcbiAgICBkaXNwYXRjaGVyOiBEaXNwYXRjaGVyPFRQYXlsb2FkPjtcclxuICAgIHJlZHVjZXI6IFN0b3JlUmVkdWNlSGFuZGxlcjxUU3RhdGUsIFRQYXlsb2FkPjtcclxuICAgIGFyZUVxdWFsPzogU3RvcmVBcmVFcXVhbEhhbmRsZXI8VFN0YXRlPjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0b3JlPFRTdGF0ZSwgVFBheWxvYWQ+KG9wdGlvbnM6IFN0b3JlT3B0aW9uczxUU3RhdGUsIFRQYXlsb2FkPik6IFN0b3JlPFRTdGF0ZSwgVFBheWxvYWQ+IHtcclxuICAgIGNvbnN0IGFyZUVxdWFsOiBTdG9yZUFyZUVxdWFsSGFuZGxlcjxUU3RhdGU+ID0gb3B0aW9ucy5hcmVFcXVhbCAhPSBudWxsID8gb3B0aW9ucy5hcmVFcXVhbCA6IChzdGF0ZSwgbmV4dFN0YXRlKSA9PiBzdGF0ZSA9PT0gbmV4dFN0YXRlO1xyXG5cclxuICAgIHJldHVybiBuZXcgU3RvcmVDbGFzczxUU3RhdGUsIFRQYXlsb2FkPihvcHRpb25zLm5hbWUsIG9wdGlvbnMuaW5pdGlhbFN0YXRlLCBvcHRpb25zLmRpc3BhdGNoZXIsIG9wdGlvbnMucmVkdWNlciwgYXJlRXF1YWwpO1xyXG59XHJcbiJdfQ==