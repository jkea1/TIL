//이미지만 봐도 그래프 문제임을 알 수 있고 노드와 간선이라는 키워드도 주어졌으므로 확실하게 그래프 문제임을 알 수 있다. 
//해심 키워드 "노드", "간선", "최단경로"
//최단 경로가 제일 큰 경우의 집합을 구하는 문제  
function solution(n, edge) {
    //그래프를 만들어 준다. 
    //인접리스트 방식으로 그래프를 만들어 주려 한다. 
    //편의상 0번 부터 시작하지 않고 1번 부터 시작하기 위해 길이를 1 더해 주었다. => n + 1
    const graph = Array.from(Array(n + 1), () => []); //초기값으로 빈 배열을 넣어주자
    //루프를 돌면서 간선들을 그어주도록 하자 
    //[source, destination]
    for(const [src, dest] of edge) {
        //src에서 도착지 정보를 그래프(인접리스트)에 추가 해줍니다.
        //간선은 양방향이 될 수 있도록 구현해 주자. 
        //이렇게 하면 그래프가 완성이 된다고? 와우
        //예를들어 [3, 6] 이라면 [[], [], [],[ 6 ], [], [],[ 3 ]] 와 같이 들어간다. 
        graph[src].push(dest);
        graph[dest].push(src);
    }
    
    //각 정점에서 정점까지의 거리를 알아내기 위한 배열을 만들자. 
    //1 정점의 길이는 1이라고 정의해주자 
    const distance = Array(n + 1).fill(0);
    distance[1] = 1; //[0,1,0,0,0,0,0]
    
    //간선들을 순회하기 위해 BFS 로직을 작성할 것이다. 
    //너비 우선 탐색 : 가까이 있는 노드부터 탐색해 나가는 방식, 큐를 이용해서 구현 할 수 있다. -> 배열로 구현하자.
    const queue = [1];
    //console.log(graph);
    while (queue.length > 0) {
        const src = queue.shift(); //shift는 O(n)이지만 요소가 적을 경우에는 자바스크립트 엔진에서 최적화를 해준다. 
        for(const dest of graph[src]) {
            if(distance[dest] === 0) {
                queue.push(dest);
                distance[dest] = distance[src] + 1;
            }
        }
    }
    
    //console.log(distance);
    //최댓값을 뽑아내자.
    const max = Math.max(...distance);
    return distance.filter(item => item === max).length
}



//⭐️ shift()가 아닌 직접 Queue을 구현해서 사용해보는 방법

class Queue {
  constructor() {
      this.queue = []; //큐를 내부적으로 선언해준다. 
      this.front = 0;
      this.rear = 0;
  }
  
  enqueue(value) {
      this.queue[this.rear++] = value; //this.rear에 value 값을 넣고 rear + 1 해주는 것이다. 
  }
  
  dequeue() {
      const value = this.queue[this.front];
      delete this.queue[this.front];
      this.front += 1;
      return value;
  }
  
  //queue가 비었는지 확인해 보자 
  isEmpty() {
      //프론트와 rear값이 같으면 아무것도 안들어가 있는 셈이다. 
      return this.rear === this.front;
  }
}

function solution(n, edge) {
  //그래프를 만들어 준다. 
  //인접리스트 방식으로 그래프를 만들어 주려 한다. 
  //편의상 0번 부터 시작하지 않고 1번 부터 시작하기 위해 길이를 1 더해 주었다. => n + 1
  const graph = Array.from(Array(n + 1), () => []); //초기값으로 빈 배열을 넣어주자
  //루프를 돌면서 간선들을 그어주도록 하자 
  //[source, destination]
  for(const [src, dest] of edge) {
      //src에서 도착지 정보를 그래프(인접리스트)에 추가 해줍니다.
      //간선은 양방향이 될 수 있도록 구현해 주자. 
      //이렇게 하면 그래프가 완성이 된다고? 와우
      //예를들어 [3, 6] 이라면 [[], [], [],[ 6 ], [], [],[ 3 ]] 와 같이 들어간다. 
      graph[src].push(dest);
      graph[dest].push(src);
  }
  
  //각 정점에서 정점까지의 거리를 알아내기 위한 배열을 만들자. 
  //1 정점의 길이는 1이라고 정의해주자 
  const distance = Array(n + 1).fill(0);
  distance[1] = 1; //[0,1,0,0,0,0,0]
  
  //간선들을 순회하기 위해 BFS 로직을 작성할 것이다. 
  //너비 우선 탐색 : 가까이 있는 노드부터 탐색해 나가는 방식, 큐를 이용해서 구현 할 수 있다. -> 배열로 구현하자.
  const queue = new Queue()
  queue.enqueue(1);
  //console.log(graph);
  while (!queue.isEmpty()) {
      const src = queue.dequeue();
      for(const dest of graph[src]) {
          if(distance[dest] === 0) {
              queue.enqueue(dest);
              distance[dest] = distance[src] + 1;
          }
      }
  }
  
  //console.log(distance);
  //최댓값을 뽑아내자.
  const max = Math.max(...distance);
  return distance.filter(item => item === max).length
}