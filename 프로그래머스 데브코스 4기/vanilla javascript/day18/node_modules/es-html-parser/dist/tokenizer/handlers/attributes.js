"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = void 0;
const constants_1 = require("../../constants");
const utils_1 = require("../../utils");
function parse(chars, state, tokens) {
    if (chars === ">" || chars === "/") {
        return parseTagEnd(state);
    }
    if (chars === "=") {
        return parseEqual(state, tokens);
    }
    if (!(0, utils_1.isWhitespace)(chars)) {
        return parseNoneWhitespace(state);
    }
    state.decisionBuffer = "";
    state.caretPosition++;
}
exports.parse = parse;
function parseTagEnd(state) {
    var _a;
    const tagName = (_a = state.contextParams[constants_1.TokenizerContextTypes.Attributes]) === null || _a === void 0 ? void 0 : _a.tagName;
    state.accumulatedContent = "";
    state.decisionBuffer = "";
    state.currentContext = constants_1.TokenizerContextTypes.OpenTagEnd;
    state.contextParams[constants_1.TokenizerContextTypes.OpenTagEnd] = { tagName: tagName };
    state.contextParams[constants_1.TokenizerContextTypes.Attributes] = undefined;
}
function parseNoneWhitespace(state) {
    state.accumulatedContent = state.decisionBuffer;
    state.decisionBuffer = "";
    state.currentContext = constants_1.TokenizerContextTypes.AttributeKey;
    state.caretPosition++;
}
function parseEqual(state, tokens) {
    const position = (0, utils_1.calculateTokenPosition)(state, { keepBuffer: true });
    tokens.push({
        type: constants_1.TokenTypes.AttributeAssignment,
        value: state.decisionBuffer,
        range: position.range,
        loc: position.loc,
    });
    state.accumulatedContent = "";
    state.decisionBuffer = "";
    state.currentContext = constants_1.TokenizerContextTypes.AttributeValue;
    state.caretPosition++;
}
