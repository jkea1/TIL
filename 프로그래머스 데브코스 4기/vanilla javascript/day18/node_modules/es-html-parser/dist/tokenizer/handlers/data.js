"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleContentEnd = exports.parse = void 0;
const constants_1 = require("../../constants");
const utils_1 = require("../../utils");
const COMMENT_START = "<!--";
const OPEN_TAG_START_PATTERN = /^<\w/;
function parse(chars, state, tokens) {
    if (OPEN_TAG_START_PATTERN.test(chars)) {
        return parseOpeningCornerBraceWithText(state, tokens);
    }
    if (chars === "</") {
        return parseOpeningCornerBraceWithSlash(state, tokens);
    }
    if (chars === "<" || chars === "<!" || chars === "<!-") {
        state.caretPosition++;
        return;
    }
    if (chars === COMMENT_START) {
        return parseCommentOpen(state, tokens);
    }
    if (isIncompleteDoctype(chars)) {
        state.caretPosition++;
        return;
    }
    if (chars.toUpperCase() === "<!DOCTYPE") {
        return parseDoctypeOpen(state, tokens);
    }
    state.accumulatedContent += state.decisionBuffer;
    state.decisionBuffer = "";
    state.caretPosition++;
}
exports.parse = parse;
function handleContentEnd(state, tokens) {
    const textContent = state.accumulatedContent + state.decisionBuffer;
    if (textContent.length !== 0) {
        const position = (0, utils_1.calculateTokenPosition)(state, { keepBuffer: false });
        tokens.push({
            type: constants_1.TokenTypes.Text,
            value: textContent,
            range: position.range,
            loc: position.loc,
        });
    }
}
exports.handleContentEnd = handleContentEnd;
function generateTextToken(state) {
    const position = (0, utils_1.calculateTokenPosition)(state, { keepBuffer: false });
    return {
        type: constants_1.TokenTypes.Text,
        value: state.accumulatedContent,
        range: position.range,
        loc: position.loc,
    };
}
function parseOpeningCornerBraceWithText(state, tokens) {
    if (state.accumulatedContent.length !== 0) {
        tokens.push(generateTextToken(state));
    }
    state.accumulatedContent = state.decisionBuffer;
    state.decisionBuffer = "";
    state.currentContext = constants_1.TokenizerContextTypes.OpenTagStart;
    state.caretPosition++;
}
function parseOpeningCornerBraceWithSlash(state, tokens) {
    if (state.accumulatedContent.length !== 0) {
        tokens.push(generateTextToken(state));
    }
    state.accumulatedContent = state.decisionBuffer;
    state.decisionBuffer = "";
    state.currentContext = constants_1.TokenizerContextTypes.CloseTag;
    state.caretPosition++;
}
function isIncompleteDoctype(chars) {
    const charsUpperCase = chars.toUpperCase();
    return (charsUpperCase === "<!" ||
        charsUpperCase === "<!D" ||
        charsUpperCase === "<!DO" ||
        charsUpperCase === "<!DOC" ||
        charsUpperCase === "<!DOCT" ||
        charsUpperCase === "<!DOCTY" ||
        charsUpperCase === "<!DOCTYP");
}
function parseCommentOpen(state, tokens) {
    if (state.accumulatedContent.length !== 0) {
        tokens.push(generateTextToken(state));
    }
    const range = [
        state.caretPosition - (COMMENT_START.length - 1),
        state.caretPosition + 1,
    ];
    const loc = (0, utils_1.calculateTokenLocation)(state.source, range);
    tokens.push({
        type: constants_1.TokenTypes.CommentOpen,
        value: state.decisionBuffer,
        range: range,
        loc,
    });
    state.accumulatedContent = "";
    state.decisionBuffer = "";
    state.currentContext = constants_1.TokenizerContextTypes.CommentContent;
    state.caretPosition++;
}
function parseDoctypeOpen(state, tokens) {
    if (state.accumulatedContent.length !== 0) {
        tokens.push(generateTextToken(state));
    }
    state.accumulatedContent = state.decisionBuffer;
    state.decisionBuffer = "";
    state.currentContext = constants_1.TokenizerContextTypes.DoctypeOpen;
    state.caretPosition++;
}
