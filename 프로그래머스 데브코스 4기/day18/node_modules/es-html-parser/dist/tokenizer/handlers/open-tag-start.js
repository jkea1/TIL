"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = void 0;
const constants_1 = require("../../constants");
const utils_1 = require("../../utils");
const tokensMap = {
    script: constants_1.TokenTypes.OpenScriptTagStart,
    style: constants_1.TokenTypes.OpenStyleTagStart,
    default: constants_1.TokenTypes.OpenTagStart,
};
function parse(chars, state, tokens) {
    if (chars === ">" || chars === "/") {
        return parseTagEnd(state, tokens);
    }
    if ((0, utils_1.isWhitespace)(chars)) {
        return parseWhitespace(state, tokens);
    }
    state.accumulatedContent += state.decisionBuffer;
    state.decisionBuffer = "";
    state.caretPosition++;
}
exports.parse = parse;
function parseWhitespace(state, tokens) {
    const tagName = (0, utils_1.parseOpenTagName)(state.accumulatedContent);
    const position = (0, utils_1.calculateTokenPosition)(state, { keepBuffer: false });
    tokens.push({
        type: tokensMap[tagName] || tokensMap.default,
        value: state.accumulatedContent,
        range: position.range,
        loc: position.loc,
    });
    state.accumulatedContent = "";
    state.decisionBuffer = "";
    state.currentContext = constants_1.TokenizerContextTypes.Attributes;
    state.contextParams[constants_1.TokenizerContextTypes.Attributes] = { tagName };
    state.caretPosition++;
}
function parseTagEnd(state, tokens) {
    const tagName = (0, utils_1.parseOpenTagName)(state.accumulatedContent);
    const position = (0, utils_1.calculateTokenPosition)(state, { keepBuffer: false });
    tokens.push({
        type: tokensMap[tagName] || tokensMap.default,
        value: state.accumulatedContent,
        range: position.range,
        loc: position.loc,
    });
    state.decisionBuffer = "";
    state.accumulatedContent = "";
    state.currentContext = constants_1.TokenizerContextTypes.OpenTagEnd;
    state.contextParams[constants_1.TokenizerContextTypes.OpenTagEnd] = { tagName };
}
