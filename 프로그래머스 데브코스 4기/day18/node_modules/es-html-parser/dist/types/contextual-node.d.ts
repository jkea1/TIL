import { CommentNode, DoctypeNode, ScriptTagNode, StyleTagNode, TagNode, DocumentNode, AnyNode, AttributeNode } from "./node";
declare type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
export declare type ContextualNode<T extends AnyNode, K extends keyof T> = PartialBy<T, K> & {
    parentRef?: any;
};
export declare type ContextualScriptTagNode = ContextualNode<ScriptTagNode, "close" | "openStart" | "value" | "openEnd">;
export declare type ContextualStyleTagNode = ContextualNode<StyleTagNode, "openStart" | "openEnd" | "value" | "close">;
export declare type ContextualDoctypeNode = ContextualNode<DoctypeNode, "open" | "close">;
export declare type ContextualCommentNode = ContextualNode<CommentNode, "open" | "close" | "value">;
export declare type ContextualTagNode = ContextualNode<TagNode, "close" | "selfClosing" | "name" | "openEnd" | "openStart"> & {
    children: Array<ContextualScriptTagNode | ContextualStyleTagNode | ContextualDoctypeNode | ContextualCommentNode | ContextualTagNode | TagNode["children"][number]>;
    attributes: ContextualAttributeNode[];
};
export declare type ContextualAttributeNode = ContextualNode<AttributeNode, "key">;
export declare type ContextualDocumentNode = Omit<ContextualNode<DocumentNode, never>, "children"> & {
    children: Array<Exclude<AnyContextualNode, ContextualDocumentNode> | DocumentNode["children"][number]>;
};
export declare type AnyContextualNode = ContextualScriptTagNode | ContextualStyleTagNode | ContextualDoctypeNode | ContextualCommentNode | ContextualTagNode | ContextualDocumentNode;
export {};
